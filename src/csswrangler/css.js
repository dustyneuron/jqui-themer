module.exports = (function(){
  /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "A": parse_A,
        "ANGLE": parse_ANGLE,
        "C": parse_C,
        "CDC": parse_CDC,
        "CDO": parse_CDO,
        "CHARSET_SYM": parse_CHARSET_SYM,
        "D": parse_D,
        "DASHMATCH": parse_DASHMATCH,
        "DIMENSION": parse_DIMENSION,
        "E": parse_E,
        "EMS": parse_EMS,
        "EXS": parse_EXS,
        "FREQ": parse_FREQ,
        "FUNCIDENT": parse_FUNCIDENT,
        "FUNCTION": parse_FUNCTION,
        "G": parse_G,
        "H": parse_H,
        "HASH": parse_HASH,
        "I": parse_I,
        "IDENT": parse_IDENT,
        "IMPORTANT_SYM": parse_IMPORTANT_SYM,
        "IMPORT_SYM": parse_IMPORT_SYM,
        "INCLUDES": parse_INCLUDES,
        "K": parse_K,
        "L": parse_L,
        "LENGTH": parse_LENGTH,
        "M": parse_M,
        "MEDIA_SYM": parse_MEDIA_SYM,
        "N": parse_N,
        "NUMBER": parse_NUMBER,
        "O": parse_O,
        "P": parse_P,
        "PAGE_SYM": parse_PAGE_SYM,
        "PERCENTAGE": parse_PERCENTAGE,
        "R": parse_R,
        "S": parse_S,
        "STRING": parse_STRING,
        "S_": parse_S_,
        "T": parse_T,
        "TIME": parse_TIME,
        "U": parse_U,
        "URI": parse_URI,
        "X": parse_X,
        "Z": parse_Z,
        "attrib": parse_attrib,
        "class": parse_class,
        "combinator": parse_combinator,
        "comment": parse_comment,
        "declaration": parse_declaration,
        "element_name": parse_element_name,
        "escape": parse_escape,
        "expr": parse_expr,
        "float": parse_float,
        "function": parse_function,
        "h": parse_h,
        "hexcolor": parse_hexcolor,
        "ident": parse_ident,
        "import": parse_import,
        "integer": parse_integer,
        "media": parse_media,
        "media_list": parse_media_list,
        "medium": parse_medium,
        "name": parse_name,
        "nl": parse_nl,
        "nmchar": parse_nmchar,
        "nmcharfunc": parse_nmcharfunc,
        "nmstart": parse_nmstart,
        "nonascii": parse_nonascii,
        "num": parse_num,
        "operator": parse_operator,
        "page": parse_page,
        "prio": parse_prio,
        "property": parse_property,
        "pseudo": parse_pseudo,
        "pseudo_page": parse_pseudo_page,
        "ruleset": parse_ruleset,
        "s": parse_s,
        "selector": parse_selector,
        "simple_selector": parse_simple_selector,
        "start": parse_start,
        "string": parse_string,
        "string1": parse_string1,
        "string2": parse_string2,
        "stylesheet": parse_stylesheet,
        "term": parse_term,
        "unary_operator": parse_unary_operator,
        "unicode": parse_unicode,
        "url": parse_url,
        "w": parse_w,
        "whole_selector": parse_whole_selector
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = 0;
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         *
         * For portability, we also escape escape all control and non-ASCII
         * characters. Note that "\0" and "\v" escape sequences are not used
         * because JSHint does not like the first and IE the second.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')  // backslash
          .replace(/"/g, '\\"')    // closing quote character
          .replace(/\x08/g, '\\b') // backspace
          .replace(/\t/g, '\\t')   // horizontal tab
          .replace(/\n/g, '\\n')   // line feed
          .replace(/\f/g, '\\f')   // form feed
          .replace(/\r/g, '\\r')   // carriage return
          .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var cacheKey = 'start@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0, pos1;
        
        
        pos0 = pos;
        result0 = parse_stylesheet();
        if (result0 !== null) {
          result0 = (function(stylesheet) { return stylesheet; })(result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_stylesheet() {
        var cacheKey = 'stylesheet@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11;
        var pos0, pos1, pos2, pos3, pos4;
        
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        result0 = parse_CHARSET_SYM();
        if (result0 !== null) {
          result1 = parse_STRING();
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 59) {
              result2 = ";";
              pos += 1;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\";\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos2;
            }
          } else {
            result0 = null;
            pos = pos2;
          }
        } else {
          result0 = null;
          pos = pos2;
        }
        result0 = result0 !== null ? result0 : '';
        if (result0 !== null) {
          result1 = [];
          result2 = parse_S();
          if (result2 === null) {
            result2 = parse_CDO();
            if (result2 === null) {
              result2 = parse_CDC();
              
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_S();
            if (result2 === null) {
              result2 = parse_CDO();
              if (result2 === null) {
                result2 = parse_CDC();
                
              }
            }
          }
          if (result1 !== null) {
            result2 = [];
            pos2 = pos;
            result3 = parse_import();
            if (result3 !== null) {
              result4 = [];
              pos3 = pos;
              result5 = parse_CDO();
              if (result5 !== null) {
                result6 = [];
                result7 = parse_S();
                while (result7 !== null) {
                  result6.push(result7);
                  result7 = parse_S();
                }
                if (result6 !== null) {
                  result5 = [result5, result6];
                } else {
                  result5 = null;
                  pos = pos3;
                }
              } else {
                result5 = null;
                pos = pos3;
              }
              if (result5 === null) {
                pos3 = pos;
                result5 = parse_CDC();
                if (result5 !== null) {
                  result6 = [];
                  result7 = parse_S();
                  while (result7 !== null) {
                    result6.push(result7);
                    result7 = parse_S();
                  }
                  if (result6 !== null) {
                    result5 = [result5, result6];
                  } else {
                    result5 = null;
                    pos = pos3;
                  }
                } else {
                  result5 = null;
                  pos = pos3;
                }
                
              }
              while (result5 !== null) {
                result4.push(result5);
                pos3 = pos;
                result5 = parse_CDO();
                if (result5 !== null) {
                  result6 = [];
                  result7 = parse_S();
                  while (result7 !== null) {
                    result6.push(result7);
                    result7 = parse_S();
                  }
                  if (result6 !== null) {
                    result5 = [result5, result6];
                  } else {
                    result5 = null;
                    pos = pos3;
                  }
                } else {
                  result5 = null;
                  pos = pos3;
                }
                if (result5 === null) {
                  pos3 = pos;
                  result5 = parse_CDC();
                  if (result5 !== null) {
                    result6 = [];
                    result7 = parse_S();
                    while (result7 !== null) {
                      result6.push(result7);
                      result7 = parse_S();
                    }
                    if (result6 !== null) {
                      result5 = [result5, result6];
                    } else {
                      result5 = null;
                      pos = pos3;
                    }
                  } else {
                    result5 = null;
                    pos = pos3;
                  }
                  
                }
              }
              if (result4 !== null) {
                result3 = [result3, result4];
              } else {
                result3 = null;
                pos = pos2;
              }
            } else {
              result3 = null;
              pos = pos2;
            }
            while (result3 !== null) {
              result2.push(result3);
              pos2 = pos;
              result3 = parse_import();
              if (result3 !== null) {
                result4 = [];
                pos3 = pos;
                result5 = parse_CDO();
                if (result5 !== null) {
                  result6 = [];
                  result7 = parse_S();
                  while (result7 !== null) {
                    result6.push(result7);
                    result7 = parse_S();
                  }
                  if (result6 !== null) {
                    result5 = [result5, result6];
                  } else {
                    result5 = null;
                    pos = pos3;
                  }
                } else {
                  result5 = null;
                  pos = pos3;
                }
                if (result5 === null) {
                  pos3 = pos;
                  result5 = parse_CDC();
                  if (result5 !== null) {
                    result6 = [];
                    result7 = parse_S();
                    while (result7 !== null) {
                      result6.push(result7);
                      result7 = parse_S();
                    }
                    if (result6 !== null) {
                      result5 = [result5, result6];
                    } else {
                      result5 = null;
                      pos = pos3;
                    }
                  } else {
                    result5 = null;
                    pos = pos3;
                  }
                  
                }
                while (result5 !== null) {
                  result4.push(result5);
                  pos3 = pos;
                  result5 = parse_CDO();
                  if (result5 !== null) {
                    result6 = [];
                    result7 = parse_S();
                    while (result7 !== null) {
                      result6.push(result7);
                      result7 = parse_S();
                    }
                    if (result6 !== null) {
                      result5 = [result5, result6];
                    } else {
                      result5 = null;
                      pos = pos3;
                    }
                  } else {
                    result5 = null;
                    pos = pos3;
                  }
                  if (result5 === null) {
                    pos3 = pos;
                    result5 = parse_CDC();
                    if (result5 !== null) {
                      result6 = [];
                      result7 = parse_S();
                      while (result7 !== null) {
                        result6.push(result7);
                        result7 = parse_S();
                      }
                      if (result6 !== null) {
                        result5 = [result5, result6];
                      } else {
                        result5 = null;
                        pos = pos3;
                      }
                    } else {
                      result5 = null;
                      pos = pos3;
                    }
                    
                  }
                }
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = pos2;
                }
              } else {
                result3 = null;
                pos = pos2;
              }
            }
            if (result2 !== null) {
              result3 = [];
              pos2 = pos;
              result4 = parse_ruleset();
              if (result4 === null) {
                result4 = parse_media();
                if (result4 === null) {
                  result4 = parse_page();
                  
                }
              }
              if (result4 !== null) {
                result5 = [];
                pos3 = pos;
                result6 = parse_CDO();
                if (result6 !== null) {
                  result7 = [];
                  result8 = parse_S();
                  while (result8 !== null) {
                    result7.push(result8);
                    result8 = parse_S();
                  }
                  if (result7 !== null) {
                    result6 = [result6, result7];
                  } else {
                    result6 = null;
                    pos = pos3;
                  }
                } else {
                  result6 = null;
                  pos = pos3;
                }
                if (result6 === null) {
                  pos3 = pos;
                  result6 = parse_CDC();
                  if (result6 !== null) {
                    result7 = [];
                    result8 = parse_S();
                    while (result8 !== null) {
                      result7.push(result8);
                      result8 = parse_S();
                    }
                    if (result7 !== null) {
                      result6 = [result6, result7];
                    } else {
                      result6 = null;
                      pos = pos3;
                    }
                  } else {
                    result6 = null;
                    pos = pos3;
                  }
                  
                }
                while (result6 !== null) {
                  result5.push(result6);
                  pos3 = pos;
                  result6 = parse_CDO();
                  if (result6 !== null) {
                    result7 = [];
                    result8 = parse_S();
                    while (result8 !== null) {
                      result7.push(result8);
                      result8 = parse_S();
                    }
                    if (result7 !== null) {
                      result6 = [result6, result7];
                    } else {
                      result6 = null;
                      pos = pos3;
                    }
                  } else {
                    result6 = null;
                    pos = pos3;
                  }
                  if (result6 === null) {
                    pos3 = pos;
                    result6 = parse_CDC();
                    if (result6 !== null) {
                      result7 = [];
                      result8 = parse_S();
                      while (result8 !== null) {
                        result7.push(result8);
                        result8 = parse_S();
                      }
                      if (result7 !== null) {
                        result6 = [result6, result7];
                      } else {
                        result6 = null;
                        pos = pos3;
                      }
                    } else {
                      result6 = null;
                      pos = pos3;
                    }
                    
                  }
                }
                if (result5 !== null) {
                  result4 = [result4, result5];
                } else {
                  result4 = null;
                  pos = pos2;
                }
              } else {
                result4 = null;
                pos = pos2;
              }
              while (result4 !== null) {
                result3.push(result4);
                pos2 = pos;
                result4 = parse_ruleset();
                if (result4 === null) {
                  result4 = parse_media();
                  if (result4 === null) {
                    result4 = parse_page();
                    
                  }
                }
                if (result4 !== null) {
                  result5 = [];
                  pos3 = pos;
                  result6 = parse_CDO();
                  if (result6 !== null) {
                    result7 = [];
                    result8 = parse_S();
                    while (result8 !== null) {
                      result7.push(result8);
                      result8 = parse_S();
                    }
                    if (result7 !== null) {
                      result6 = [result6, result7];
                    } else {
                      result6 = null;
                      pos = pos3;
                    }
                  } else {
                    result6 = null;
                    pos = pos3;
                  }
                  if (result6 === null) {
                    pos3 = pos;
                    result6 = parse_CDC();
                    if (result6 !== null) {
                      result7 = [];
                      result8 = parse_S();
                      while (result8 !== null) {
                        result7.push(result8);
                        result8 = parse_S();
                      }
                      if (result7 !== null) {
                        result6 = [result6, result7];
                      } else {
                        result6 = null;
                        pos = pos3;
                      }
                    } else {
                      result6 = null;
                      pos = pos3;
                    }
                    
                  }
                  while (result6 !== null) {
                    result5.push(result6);
                    pos3 = pos;
                    result6 = parse_CDO();
                    if (result6 !== null) {
                      result7 = [];
                      result8 = parse_S();
                      while (result8 !== null) {
                        result7.push(result8);
                        result8 = parse_S();
                      }
                      if (result7 !== null) {
                        result6 = [result6, result7];
                      } else {
                        result6 = null;
                        pos = pos3;
                      }
                    } else {
                      result6 = null;
                      pos = pos3;
                    }
                    if (result6 === null) {
                      pos3 = pos;
                      result6 = parse_CDC();
                      if (result6 !== null) {
                        result7 = [];
                        result8 = parse_S();
                        while (result8 !== null) {
                          result7.push(result8);
                          result8 = parse_S();
                        }
                        if (result7 !== null) {
                          result6 = [result6, result7];
                        } else {
                          result6 = null;
                          pos = pos3;
                        }
                      } else {
                        result6 = null;
                        pos = pos3;
                      }
                      
                    }
                  }
                  if (result5 !== null) {
                    result4 = [result4, result5];
                  } else {
                    result4 = null;
                    pos = pos2;
                  }
                } else {
                  result4 = null;
                  pos = pos2;
                }
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(elements) {
          
                return {
                  type:    "stylesheet",
                  elements: elements
                };
              })(result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_import() {
        var cacheKey = 'import@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1, pos2;
        
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_IMPORT_SYM();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_S();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_S();
          }
          if (result1 !== null) {
            result2 = parse_STRING();
            if (result2 === null) {
              result2 = parse_URI();
              
            }
            if (result2 !== null) {
              result3 = [];
              result4 = parse_S();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_S();
              }
              if (result3 !== null) {
                result4 = parse_media_list();
                result4 = result4 !== null ? result4 : '';
                if (result4 !== null) {
                  if (input.charCodeAt(pos) === 59) {
                    result5 = ";";
                    pos += 1;
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\";\"");
                    }
                  }
                  if (result5 !== null) {
                    result6 = [];
                    result7 = parse_S();
                    while (result7 !== null) {
                      result6.push(result7);
                      result7 = parse_S();
                    }
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(elements) {
                return {
                  type:  "import_rule",
                  elements: elements,
                  href:  href,
                  media: media !== "" ? media : []
                };
              })(result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_media() {
        var cacheKey = 'media@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9;
        var pos0, pos1, pos2;
        
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_MEDIA_SYM();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_S();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_S();
          }
          if (result1 !== null) {
            result2 = parse_media_list();
            if (result2 !== null) {
              if (input.charCodeAt(pos) === 123) {
                result3 = "{";
                pos += 1;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"{\"");
                }
              }
              if (result3 !== null) {
                result4 = [];
                result5 = parse_S();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_S();
                }
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse_ruleset();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse_ruleset();
                  }
                  if (result5 !== null) {
                    if (input.charCodeAt(pos) === 125) {
                      result6 = "}";
                      pos += 1;
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"}\"");
                      }
                    }
                    if (result6 !== null) {
                      result7 = [];
                      result8 = parse_S();
                      while (result8 !== null) {
                        result7.push(result8);
                        result8 = parse_S();
                      }
                      if (result7 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(elements) {
                return {
                  type:  "media_rule",
                  elements: elements,
                  media: media,
                  rules: rules
                };
              })(result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_media_list() {
        var cacheKey = 'media_list@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2, pos3;
        
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_medium();
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          if (input.charCodeAt(pos) === 44) {
            result2 = ",";
            pos += 1;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\",\"");
            }
          }
          if (result2 !== null) {
            result3 = [];
            result4 = parse_S();
            while (result4 !== null) {
              result3.push(result4);
              result4 = parse_S();
            }
            if (result3 !== null) {
              result4 = parse_medium();
              if (result4 !== null) {
                result2 = [result2, result3, result4];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            if (input.charCodeAt(pos) === 44) {
              result2 = ",";
              pos += 1;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\",\"");
              }
            }
            if (result2 !== null) {
              result3 = [];
              result4 = parse_S();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_S();
              }
              if (result3 !== null) {
                result4 = parse_medium();
                if (result4 !== null) {
                  result2 = [result2, result3, result4];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(head, tail) {
                var result = [head];
                for (var i = 0; i < tail.length; i++) {
                  result.push(tail[i][2]);
                }
                return result;
              })(result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_medium() {
        var cacheKey = 'medium@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_IDENT();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_S();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_S();
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(ident) { return ident; })(result0[0]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_page() {
        var cacheKey = 'page@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11;
        var pos0, pos1, pos2, pos3;
        
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_PAGE_SYM();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_S();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_S();
          }
          if (result1 !== null) {
            result2 = parse_pseudo_page();
            result2 = result2 !== null ? result2 : '';
            if (result2 !== null) {
              if (input.charCodeAt(pos) === 123) {
                result3 = "{";
                pos += 1;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"{\"");
                }
              }
              if (result3 !== null) {
                result4 = [];
                result5 = parse_S();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_S();
                }
                if (result4 !== null) {
                  result5 = parse_declaration();
                  result5 = result5 !== null ? result5 : '';
                  if (result5 !== null) {
                    result6 = [];
                    pos2 = pos;
                    if (input.charCodeAt(pos) === 59) {
                      result7 = ";";
                      pos += 1;
                    } else {
                      result7 = null;
                      if (reportFailures === 0) {
                        matchFailed("\";\"");
                      }
                    }
                    if (result7 !== null) {
                      result8 = [];
                      result9 = parse_S();
                      while (result9 !== null) {
                        result8.push(result9);
                        result9 = parse_S();
                      }
                      if (result8 !== null) {
                        result9 = parse_declaration();
                        result9 = result9 !== null ? result9 : '';
                        if (result9 !== null) {
                          result7 = [result7, result8, result9];
                        } else {
                          result7 = null;
                          pos = pos2;
                        }
                      } else {
                        result7 = null;
                        pos = pos2;
                      }
                    } else {
                      result7 = null;
                      pos = pos2;
                    }
                    while (result7 !== null) {
                      result6.push(result7);
                      pos2 = pos;
                      if (input.charCodeAt(pos) === 59) {
                        result7 = ";";
                        pos += 1;
                      } else {
                        result7 = null;
                        if (reportFailures === 0) {
                          matchFailed("\";\"");
                        }
                      }
                      if (result7 !== null) {
                        result8 = [];
                        result9 = parse_S();
                        while (result9 !== null) {
                          result8.push(result9);
                          result9 = parse_S();
                        }
                        if (result8 !== null) {
                          result9 = parse_declaration();
                          result9 = result9 !== null ? result9 : '';
                          if (result9 !== null) {
                            result7 = [result7, result8, result9];
                          } else {
                            result7 = null;
                            pos = pos2;
                          }
                        } else {
                          result7 = null;
                          pos = pos2;
                        }
                      } else {
                        result7 = null;
                        pos = pos2;
                      }
                    }
                    if (result6 !== null) {
                      if (input.charCodeAt(pos) === 125) {
                        result7 = "}";
                        pos += 1;
                      } else {
                        result7 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"}\"");
                        }
                      }
                      if (result7 !== null) {
                        result8 = [];
                        result9 = parse_S();
                        while (result9 !== null) {
                          result8.push(result9);
                          result9 = parse_S();
                        }
                        if (result8 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(elements) {
                var declarations = declarationsHead !== "" ? [declarationsHead] : [];
                for (var i = 0; i < declarationsTail.length; i++) {
                  if (declarationsTail[i][2] !== "") {
                    declarations.push(declarationsTail[i][2]);
                  }
                }
          
                return {
                  type:         "page_rule",
                  elements:     elements,
                  qualifier:    qualifier !== "" ? qualifier : null,
                  declarations: declarations
                };
              })(result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_pseudo_page() {
        var cacheKey = 'pseudo_page@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 58) {
          result0 = ":";
          pos += 1;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\":\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_IDENT();
          if (result1 !== null) {
            result2 = [];
            result3 = parse_S();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_S();
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(ident) { return ident; })(result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_operator() {
        var cacheKey = 'operator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        
        result1 = parse_S();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_S();
          }
        } else {
          result0 = null;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.charCodeAt(pos) === 47) {
            result0 = "/";
            pos += 1;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"/\"");
            }
          }
          if (result0 !== null) {
            result1 = [];
            result2 = parse_S();
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_S();
            }
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function() { return "/"; })();
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            if (input.charCodeAt(pos) === 44) {
              result0 = ",";
              pos += 1;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\",\"");
              }
            }
            if (result0 !== null) {
              result1 = [];
              result2 = parse_S();
              while (result2 !== null) {
                result1.push(result2);
                result2 = parse_S();
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function() { return ","; })();
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              if (input.charCodeAt(pos) === 61) {
                result0 = "=";
                pos += 1;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"=\"");
                }
              }
              if (result0 !== null) {
                result1 = [];
                result2 = parse_S();
                while (result2 !== null) {
                  result1.push(result2);
                  result2 = parse_S();
                }
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function() { return "="; })();
              }
              if (result0 === null) {
                pos = pos0;
              }
              
            }
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_combinator() {
        var cacheKey = 'combinator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 43) {
          result0 = "+";
          pos += 1;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"+\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_S();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_S();
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function() { return "+"; })();
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.charCodeAt(pos) === 62) {
            result0 = ">";
            pos += 1;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\">\"");
            }
          }
          if (result0 !== null) {
            result1 = [];
            result2 = parse_S();
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_S();
            }
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function() { return ">"; })();
          }
          if (result0 === null) {
            pos = pos0;
          }
          
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_unary_operator() {
        var cacheKey = 'unary_operator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        
        if (input.charCodeAt(pos) === 43) {
          result0 = "+";
          pos += 1;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"+\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos) === 45) {
            result0 = "-";
            pos += 1;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"-\"");
            }
          }
          
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_property() {
        var cacheKey = 'property@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_IDENT();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_S();
          if (result2 === null) {
            result2 = parse_comment();
            
          }
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_S();
            if (result2 === null) {
              result2 = parse_comment();
              
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(ident, other) {
              return {
                  type: 'property',
                  elements: [ident, other]
              };
            })(result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_whole_selector() {
        var cacheKey = 'whole_selector@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0, pos1;
        
        
        pos0 = pos;
        result0 = parse_selector();
        if (result0 !== null) {
          result0 = (function(selector) {
              return {
                  type: 'whole_selector',
                  elements: [selector]
              };
            })(result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ruleset() {
        var cacheKey = 'ruleset@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10;
        var pos0, pos1, pos2, pos3;
        
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_whole_selector();
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          if (input.charCodeAt(pos) === 44) {
            result2 = ",";
            pos += 1;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\",\"");
            }
          }
          if (result2 !== null) {
            result3 = [];
            result4 = parse_S();
            while (result4 !== null) {
              result3.push(result4);
              result4 = parse_S();
            }
            if (result3 !== null) {
              result4 = parse_whole_selector();
              if (result4 !== null) {
                result2 = [result2, result3, result4];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            if (input.charCodeAt(pos) === 44) {
              result2 = ",";
              pos += 1;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\",\"");
              }
            }
            if (result2 !== null) {
              result3 = [];
              result4 = parse_S();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_S();
              }
              if (result3 !== null) {
                result4 = parse_whole_selector();
                if (result4 !== null) {
                  result2 = [result2, result3, result4];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 123) {
              result2 = "{";
              pos += 1;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"{\"");
              }
            }
            if (result2 !== null) {
              result3 = [];
              result4 = parse_S();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_S();
              }
              if (result3 !== null) {
                result4 = parse_declaration();
                result4 = result4 !== null ? result4 : '';
                if (result4 !== null) {
                  result5 = [];
                  pos2 = pos;
                  if (input.charCodeAt(pos) === 59) {
                    result6 = ";";
                    pos += 1;
                  } else {
                    result6 = null;
                    if (reportFailures === 0) {
                      matchFailed("\";\"");
                    }
                  }
                  if (result6 !== null) {
                    result7 = [];
                    result8 = parse_S();
                    while (result8 !== null) {
                      result7.push(result8);
                      result8 = parse_S();
                    }
                    if (result7 !== null) {
                      result8 = parse_declaration();
                      result8 = result8 !== null ? result8 : '';
                      if (result8 !== null) {
                        result6 = [result6, result7, result8];
                      } else {
                        result6 = null;
                        pos = pos2;
                      }
                    } else {
                      result6 = null;
                      pos = pos2;
                    }
                  } else {
                    result6 = null;
                    pos = pos2;
                  }
                  while (result6 !== null) {
                    result5.push(result6);
                    pos2 = pos;
                    if (input.charCodeAt(pos) === 59) {
                      result6 = ";";
                      pos += 1;
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("\";\"");
                      }
                    }
                    if (result6 !== null) {
                      result7 = [];
                      result8 = parse_S();
                      while (result8 !== null) {
                        result7.push(result8);
                        result8 = parse_S();
                      }
                      if (result7 !== null) {
                        result8 = parse_declaration();
                        result8 = result8 !== null ? result8 : '';
                        if (result8 !== null) {
                          result6 = [result6, result7, result8];
                        } else {
                          result6 = null;
                          pos = pos2;
                        }
                      } else {
                        result6 = null;
                        pos = pos2;
                      }
                    } else {
                      result6 = null;
                      pos = pos2;
                    }
                  }
                  if (result5 !== null) {
                    if (input.charCodeAt(pos) === 125) {
                      result6 = "}";
                      pos += 1;
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"}\"");
                      }
                    }
                    if (result6 !== null) {
                      result7 = [];
                      result8 = parse_S();
                      while (result8 !== null) {
                        result7.push(result8);
                        result8 = parse_S();
                      }
                      if (result7 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(elements) {
                return {
                  type:         "ruleset",
                  elements:     elements
                };
              })(result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_selector() {
        var cacheKey = 'selector@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_simple_selector();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_S();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_S();
          }
          if (result1 !== null) {
            result2 = parse_combinator();
            if (result2 !== null) {
              result3 = parse_selector();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(elements) {
                return {
                  type:       "selector",
                  elements:     elements
                };
              })(result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_simple_selector();
          if (result0 !== null) {
            result2 = parse_S();
            if (result2 !== null) {
              result1 = [];
              while (result2 !== null) {
                result1.push(result2);
                result2 = parse_S();
              }
            } else {
              result1 = null;
            }
            if (result1 !== null) {
              result2 = parse_selector();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(elements) {
                  return {
                    type:       "selector",
                    elements:     elements
                  };
                })(result0);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            result0 = parse_simple_selector();
            if (result0 !== null) {
              result1 = [];
              result2 = parse_S();
              while (result2 !== null) {
                result1.push(result2);
                result2 = parse_S();
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(elements) {
                    return {
                      type:       "selector",
                      elements:     elements
                    };
                  })(result0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_simple_selector() {
        var cacheKey = 'simple_selector@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3;
        
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_element_name();
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          result2 = parse_HASH();
          if (result2 !== null) {
            result2 = (function(id) { return { type: "ID selector", elements: [id] }; })(result2);
          }
          if (result2 === null) {
            pos = pos2;
          }
          if (result2 === null) {
            result2 = parse_class();
            if (result2 === null) {
              result2 = parse_attrib();
              if (result2 === null) {
                result2 = parse_pseudo();
                
              }
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            result2 = parse_HASH();
            if (result2 !== null) {
              result2 = (function(id) { return { type: "ID selector", elements: [id] }; })(result2);
            }
            if (result2 === null) {
              pos = pos2;
            }
            if (result2 === null) {
              result2 = parse_class();
              if (result2 === null) {
                result2 = parse_attrib();
                if (result2 === null) {
                  result2 = parse_pseudo();
                  
                }
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(element, qualifiers) {
                return {
                  type:       "simple_selector",
                  elements: [
                      {
                          type:'element_selector',
                          elements:[element]
                      },
                      qualifiers
                  ]
                };
              })(result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result1 = parse_HASH();
          if (result1 !== null) {
            result1 = (function(id) { return { type: "ID selector", elements: [id] }; })(result1);
          }
          if (result1 === null) {
            pos = pos1;
          }
          if (result1 === null) {
            result1 = parse_class();
            if (result1 === null) {
              result1 = parse_attrib();
              if (result1 === null) {
                result1 = parse_pseudo();
                
              }
            }
          }
          if (result1 !== null) {
            result0 = [];
            while (result1 !== null) {
              result0.push(result1);
              pos1 = pos;
              result1 = parse_HASH();
              if (result1 !== null) {
                result1 = (function(id) { return { type: "ID selector", elements: [id] }; })(result1);
              }
              if (result1 === null) {
                pos = pos1;
              }
              if (result1 === null) {
                result1 = parse_class();
                if (result1 === null) {
                  result1 = parse_attrib();
                  if (result1 === null) {
                    result1 = parse_pseudo();
                    
                  }
                }
              }
            }
          } else {
            result0 = null;
          }
          if (result0 !== null) {
            result0 = (function(qualifiers) {
                  return {
                    type:       "simple_selector",
                    elements: qualifiers
                  };
                })(result0);
          }
          if (result0 === null) {
            pos = pos0;
          }
          
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_class() {
        var cacheKey = 'class@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 46) {
          result0 = ".";
          pos += 1;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\".\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_IDENT();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(class_) {
                  return {
                      type: "class_selector",
                      elements: ['.', class_]
                  };
              })(result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_element_name() {
        var cacheKey = 'element_name@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        
        result0 = parse_IDENT();
        if (result0 === null) {
          if (input.charCodeAt(pos) === 42) {
            result0 = "*";
            pos += 1;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"*\"");
            }
          }
          
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_attrib() {
        var cacheKey = 'attrib@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10;
        var pos0, pos1, pos2, pos3;
        
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 91) {
          result0 = "[";
          pos += 1;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"[\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_S();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_S();
          }
          if (result1 !== null) {
            result2 = parse_IDENT();
            if (result2 !== null) {
              result3 = [];
              result4 = parse_S();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_S();
              }
              if (result3 !== null) {
                pos2 = pos;
                if (input.charCodeAt(pos) === 61) {
                  result4 = "=";
                  pos += 1;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"=\"");
                  }
                }
                if (result4 === null) {
                  result4 = parse_INCLUDES();
                  if (result4 === null) {
                    result4 = parse_DASHMATCH();
                    
                  }
                }
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse_S();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse_S();
                  }
                  if (result5 !== null) {
                    result6 = parse_IDENT();
                    if (result6 === null) {
                      result6 = parse_STRING();
                      
                    }
                    if (result6 !== null) {
                      result7 = [];
                      result8 = parse_S();
                      while (result8 !== null) {
                        result7.push(result8);
                        result8 = parse_S();
                      }
                      if (result7 !== null) {
                        result4 = [result4, result5, result6, result7];
                      } else {
                        result4 = null;
                        pos = pos2;
                      }
                    } else {
                      result4 = null;
                      pos = pos2;
                    }
                  } else {
                    result4 = null;
                    pos = pos2;
                  }
                } else {
                  result4 = null;
                  pos = pos2;
                }
                result4 = result4 !== null ? result4 : '';
                if (result4 !== null) {
                  if (input.charCodeAt(pos) === 93) {
                    result5 = "]";
                    pos += 1;
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"]\"");
                    }
                  }
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(attribute, operatorAndValue) {
                return {
                  type:      "attribute_selector",
                  attribute: attribute,
                  operator:  operatorAndValue !== "" ? operatorAndValue[0] : null,
                  value:     operatorAndValue !== "" ? operatorAndValue[2] : null
                };
              })(result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_pseudo() {
        var cacheKey = 'pseudo@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1, pos2, pos3, pos4, pos5;
        
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 58) {
          result0 = ":";
          pos += 1;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\":\"");
          }
        }
        if (result0 !== null) {
          pos2 = pos;
          pos3 = pos;
          result1 = parse_FUNCTION();
          if (result1 !== null) {
            result2 = [];
            result3 = parse_S();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_S();
            }
            if (result2 !== null) {
              pos4 = pos;
              result3 = parse_IDENT();
              if (result3 !== null) {
                result4 = [];
                result5 = parse_S();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_S();
                }
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = pos4;
                }
              } else {
                result3 = null;
                pos = pos4;
              }
              result3 = result3 !== null ? result3 : '';
              if (result3 !== null) {
                if (input.charCodeAt(pos) === 41) {
                  result4 = ")";
                  pos += 1;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\")\"");
                  }
                }
                if (result4 !== null) {
                  result1 = [result1, result2, result3, result4];
                } else {
                  result1 = null;
                  pos = pos3;
                }
              } else {
                result1 = null;
                pos = pos3;
              }
            } else {
              result1 = null;
              pos = pos3;
            }
          } else {
            result1 = null;
            pos = pos3;
          }
          if (result1 !== null) {
            result1 = (function(name, params) {
                      return {
                        type:   "function",
                        name:   name,
                        params: params !== "" ? [params[0]] : []
                      };
                    })(result1[0], result1[2]);
          }
          if (result1 === null) {
            pos = pos2;
          }
          if (result1 === null) {
            result1 = parse_IDENT();
            if (result1 === null) {
              pos2 = pos;
              if (input.charCodeAt(pos) === 58) {
                result1 = ":";
                pos += 1;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\":\"");
                }
              }
              if (result1 !== null) {
                result2 = parse_IDENT();
                if (result2 !== null) {
                  result1 = [result1, result2];
                } else {
                  result1 = null;
                  pos = pos2;
                }
              } else {
                result1 = null;
                pos = pos2;
              }
              
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(value) {
                /*
                 * The returned object has somewhat vague property names and values because
                 * the rule matches both pseudo-classes and pseudo-elements (they look the
                 * same at the syntactic level).
                 */
                return {
                  type:  "pseudo_selector",
                  value: value,
                  elements: [':', value]
                };
              })(result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_declaration() {
        var cacheKey = 'declaration@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2;
        
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_property();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 58) {
            result1 = ":";
            pos += 1;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\":\"");
            }
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_S();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_S();
            }
            if (result2 !== null) {
              result3 = parse_expr();
              if (result3 !== null) {
                result4 = parse_prio();
                result4 = result4 !== null ? result4 : '';
                if (result4 !== null) {
                  result5 = parse_comment();
                  result5 = result5 !== null ? result5 : '';
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(elements) {
                return {
                  type:       "declaration",
                  elements:   elements
                };
              })(result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_prio() {
        var cacheKey = 'prio@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        
        pos0 = pos;
        result0 = [];
        result1 = parse_S();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_S();
        }
        if (result0 !== null) {
          result1 = parse_IMPORTANT_SYM();
          if (result1 !== null) {
            result2 = [];
            result3 = parse_S();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_S();
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_expr() {
        var cacheKey = 'expr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2, pos3;
        
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_term();
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          result2 = parse_operator();
          result2 = result2 !== null ? result2 : '';
          if (result2 !== null) {
            result3 = parse_term();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            result2 = parse_operator();
            result2 = result2 !== null ? result2 : '';
            if (result2 !== null) {
              result3 = parse_term();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(head, tail) {
                return {
                    type:     "expression",
                    elements: [head, tail]
                };
              })(result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_term() {
        var cacheKey = 'term@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        
        pos0 = pos;
        if (input.substr(pos, 7) === "progid:") {
          result0 = "progid:";
          pos += 7;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"progid:\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_S();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_S();
          }
          if (result1 !== null) {
            result2 = parse_term();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_unary_operator();
          result0 = result0 !== null ? result0 : '';
          if (result0 !== null) {
            result1 = parse_EMS();
            if (result1 === null) {
              result1 = parse_EXS();
              if (result1 === null) {
                result1 = parse_LENGTH();
                if (result1 === null) {
                  result1 = parse_ANGLE();
                  if (result1 === null) {
                    result1 = parse_TIME();
                    if (result1 === null) {
                      result1 = parse_FREQ();
                      if (result1 === null) {
                        result1 = parse_PERCENTAGE();
                        if (result1 === null) {
                          result1 = parse_NUMBER();
                          
                        }
                      }
                    }
                  }
                }
              }
            }
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(operator, value) { return { type: "term", elements: [operator, value] }; })(result0[0], result0[1]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            result0 = parse_URI();
            if (result0 !== null) {
              result0 = (function(value) { return { type: "term", elements: [value] }; })(result0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              result0 = parse_function();
              if (result0 !== null) {
                result0 = (function(func) { return { type: "term", elements: [func] }; })(result0);
              }
              if (result0 === null) {
                pos = pos0;
              }
              if (result0 === null) {
                pos0 = pos;
                result0 = parse_hexcolor();
                if (result0 !== null) {
                  result0 = (function(col) { return { type: "term", elements: [col] }; })(result0);
                }
                if (result0 === null) {
                  pos = pos0;
                }
                if (result0 === null) {
                  pos0 = pos;
                  result0 = parse_STRING();
                  if (result0 !== null) {
                    result0 = (function(value) { return { type: "term", elements: [value] }; })(result0);
                  }
                  if (result0 === null) {
                    pos = pos0;
                  }
                  if (result0 === null) {
                    pos0 = pos;
                    result0 = parse_IDENT();
                    if (result0 !== null) {
                      result0 = (function(value) { return { type: "term", elements: [value] }; })(result0);
                    }
                    if (result0 === null) {
                      pos = pos0;
                    }
                    
                  }
                }
              }
            }
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_function() {
        var cacheKey = 'function@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_FUNCTION();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_S();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_S();
          }
          if (result1 !== null) {
            result2 = parse_expr();
            result2 = result2 !== null ? result2 : '';
            if (result2 !== null) {
              if (input.charCodeAt(pos) === 41) {
                result3 = ")";
                pos += 1;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\")\"");
                }
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(name, space1, params) {
                return {
                  type:   "term",
                  elements: [name, space1, params, ')']
                };
              })(result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_hexcolor() {
        var cacheKey = 'hexcolor@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0, pos1;
        
        
        pos0 = pos;
        result0 = parse_HASH();
        if (result0 !== null) {
          result0 = (function(value) { return { type: "hexcolor", elements: [value]}; })(result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_h() {
        var cacheKey = 'h@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        
        if (/^[0-9a-fA-F]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9a-fA-F]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_nonascii() {
        var cacheKey = 'nonascii@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        
        if (/^[\x80-\xFF]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\x80-\\xFF]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_unicode() {
        var cacheKey = 'unicode@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1, pos2;
        
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 92) {
          result0 = "\\";
          pos += 1;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\\\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_h();
          if (result1 !== null) {
            result2 = parse_h();
            result2 = result2 !== null ? result2 : '';
            if (result2 !== null) {
              result3 = parse_h();
              result3 = result3 !== null ? result3 : '';
              if (result3 !== null) {
                result4 = parse_h();
                result4 = result4 !== null ? result4 : '';
                if (result4 !== null) {
                  result5 = parse_h();
                  result5 = result5 !== null ? result5 : '';
                  if (result5 !== null) {
                    result6 = parse_h();
                    result6 = result6 !== null ? result6 : '';
                    if (result6 !== null) {
                      if (input.substr(pos, 2) === "\r\n") {
                        result7 = "\r\n";
                        pos += 2;
                      } else {
                        result7 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"\\r\\n\"");
                        }
                      }
                      if (result7 === null) {
                        if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
                          result7 = input.charAt(pos);
                          pos++;
                        } else {
                          result7 = null;
                          if (reportFailures === 0) {
                            matchFailed("[ \\t\\r\\n\\f]");
                          }
                        }
                        
                      }
                      result7 = result7 !== null ? result7 : '';
                      if (result7 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(h1, h2, h3, h4, h5, h6) {
                return String.fromCharCode(parseInt("0x" + h1 + h2 + h3 + h4 + h5 + h6));
              })(result0[1], result0[2], result0[3], result0[4], result0[5], result0[6]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_escape() {
        var cacheKey = 'escape@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        
        result0 = parse_unicode();
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.charCodeAt(pos) === 92) {
            result0 = "\\";
            pos += 1;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\"");
            }
          }
          if (result0 !== null) {
            if (/^[^\r\n\f0-9a-fA-F]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[^\\r\\n\\f0-9a-fA-F]");
              }
            }
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(char_) { return char_; })(result0[1]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_nmstart() {
        var cacheKey = 'nmstart@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        
        if (/^[_a-zA-Z]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[_a-zA-Z]");
          }
        }
        if (result0 === null) {
          result0 = parse_nonascii();
          if (result0 === null) {
            result0 = parse_escape();
            
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_nmchar() {
        var cacheKey = 'nmchar@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        
        if (/^[_a-zA-Z0-9\-]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[_a-zA-Z0-9\\-]");
          }
        }
        if (result0 === null) {
          result0 = parse_nonascii();
          if (result0 === null) {
            result0 = parse_escape();
            
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_integer() {
        var cacheKey = 'integer@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        
        pos0 = pos;
        if (/^[0-9]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[0-9]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(digits) { return parseInt(digits.join("")); })(result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_float() {
        var cacheKey = 'float@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        if (/^[0-9]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (/^[0-9]/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9]");
            }
          }
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 46) {
            result1 = ".";
            pos += 1;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          if (result1 !== null) {
            if (/^[0-9]/.test(input.charAt(pos))) {
              result3 = input.charAt(pos);
              pos++;
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                if (/^[0-9]/.test(input.charAt(pos))) {
                  result3 = input.charAt(pos);
                  pos++;
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("[0-9]");
                  }
                }
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(before, after) {
                return parseFloat(before.join("") + "." + after.join(""));
              })(result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_string1() {
        var cacheKey = 'string1@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2, pos3, pos4;
        
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 34) {
          result0 = "\"";
          pos += 1;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          if (/^[^\n\r\f\\"]/.test(input.charAt(pos))) {
            result2 = input.charAt(pos);
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[^\\n\\r\\f\\\\\"]");
            }
          }
          if (result2 === null) {
            pos2 = pos;
            pos3 = pos;
            if (input.charCodeAt(pos) === 92) {
              result2 = "\\";
              pos += 1;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\\\"");
              }
            }
            if (result2 !== null) {
              result3 = parse_nl();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos3;
              }
            } else {
              result2 = null;
              pos = pos3;
            }
            if (result2 !== null) {
              result2 = (function(nl) { return nl })(result2[1]);
            }
            if (result2 === null) {
              pos = pos2;
            }
            if (result2 === null) {
              result2 = parse_escape();
              
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (/^[^\n\r\f\\"]/.test(input.charAt(pos))) {
              result2 = input.charAt(pos);
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[^\\n\\r\\f\\\\\"]");
              }
            }
            if (result2 === null) {
              pos2 = pos;
              pos3 = pos;
              if (input.charCodeAt(pos) === 92) {
                result2 = "\\";
                pos += 1;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\\\"");
                }
              }
              if (result2 !== null) {
                result3 = parse_nl();
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos3;
                }
              } else {
                result2 = null;
                pos = pos3;
              }
              if (result2 !== null) {
                result2 = (function(nl) { return nl })(result2[1]);
              }
              if (result2 === null) {
                pos = pos2;
              }
              if (result2 === null) {
                result2 = parse_escape();
                
              }
            }
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 34) {
              result2 = "\"";
              pos += 1;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(chars) {
                return chars.join("");
              })(result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_string2() {
        var cacheKey = 'string2@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2, pos3, pos4;
        
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 39) {
          result0 = "'";
          pos += 1;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"'\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          if (/^[^\n\r\f\\']/.test(input.charAt(pos))) {
            result2 = input.charAt(pos);
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[^\\n\\r\\f\\\\']");
            }
          }
          if (result2 === null) {
            pos2 = pos;
            pos3 = pos;
            if (input.charCodeAt(pos) === 92) {
              result2 = "\\";
              pos += 1;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\\\"");
              }
            }
            if (result2 !== null) {
              result3 = parse_nl();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos3;
              }
            } else {
              result2 = null;
              pos = pos3;
            }
            if (result2 !== null) {
              result2 = (function(nl) { return nl })(result2[1]);
            }
            if (result2 === null) {
              pos = pos2;
            }
            if (result2 === null) {
              result2 = parse_escape();
              
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (/^[^\n\r\f\\']/.test(input.charAt(pos))) {
              result2 = input.charAt(pos);
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[^\\n\\r\\f\\\\']");
              }
            }
            if (result2 === null) {
              pos2 = pos;
              pos3 = pos;
              if (input.charCodeAt(pos) === 92) {
                result2 = "\\";
                pos += 1;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\\\"");
                }
              }
              if (result2 !== null) {
                result3 = parse_nl();
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos3;
                }
              } else {
                result2 = null;
                pos = pos3;
              }
              if (result2 !== null) {
                result2 = (function(nl) { return nl })(result2[1]);
              }
              if (result2 === null) {
                pos = pos2;
              }
              if (result2 === null) {
                result2 = parse_escape();
                
              }
            }
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 39) {
              result2 = "'";
              pos += 1;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"'\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(chars) {
                return chars.join("");
              })(result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_comment() {
        var cacheKey = 'comment@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9;
        var pos0, pos1, pos2, pos3;
        
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 2) === "/*") {
          result0 = "/*";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"/*\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          if (/^[^*]/.test(input.charAt(pos))) {
            result2 = input.charAt(pos);
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[^*]");
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (/^[^*]/.test(input.charAt(pos))) {
              result2 = input.charAt(pos);
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[^*]");
              }
            }
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 42) {
              result3 = "*";
              pos += 1;
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("\"*\"");
              }
            }
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                if (input.charCodeAt(pos) === 42) {
                  result3 = "*";
                  pos += 1;
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"*\"");
                  }
                }
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result3 = [];
              pos2 = pos;
              if (/^[^\/*]/.test(input.charAt(pos))) {
                result4 = input.charAt(pos);
                pos++;
              } else {
                result4 = null;
                if (reportFailures === 0) {
                  matchFailed("[^\\/*]");
                }
              }
              if (result4 !== null) {
                result5 = [];
                if (/^[^*]/.test(input.charAt(pos))) {
                  result6 = input.charAt(pos);
                  pos++;
                } else {
                  result6 = null;
                  if (reportFailures === 0) {
                    matchFailed("[^*]");
                  }
                }
                while (result6 !== null) {
                  result5.push(result6);
                  if (/^[^*]/.test(input.charAt(pos))) {
                    result6 = input.charAt(pos);
                    pos++;
                  } else {
                    result6 = null;
                    if (reportFailures === 0) {
                      matchFailed("[^*]");
                    }
                  }
                }
                if (result5 !== null) {
                  if (input.charCodeAt(pos) === 42) {
                    result7 = "*";
                    pos += 1;
                  } else {
                    result7 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"*\"");
                    }
                  }
                  if (result7 !== null) {
                    result6 = [];
                    while (result7 !== null) {
                      result6.push(result7);
                      if (input.charCodeAt(pos) === 42) {
                        result7 = "*";
                        pos += 1;
                      } else {
                        result7 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"*\"");
                        }
                      }
                    }
                  } else {
                    result6 = null;
                  }
                  if (result6 !== null) {
                    result4 = [result4, result5, result6];
                  } else {
                    result4 = null;
                    pos = pos2;
                  }
                } else {
                  result4 = null;
                  pos = pos2;
                }
              } else {
                result4 = null;
                pos = pos2;
              }
              while (result4 !== null) {
                result3.push(result4);
                pos2 = pos;
                if (/^[^\/*]/.test(input.charAt(pos))) {
                  result4 = input.charAt(pos);
                  pos++;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("[^\\/*]");
                  }
                }
                if (result4 !== null) {
                  result5 = [];
                  if (/^[^*]/.test(input.charAt(pos))) {
                    result6 = input.charAt(pos);
                    pos++;
                  } else {
                    result6 = null;
                    if (reportFailures === 0) {
                      matchFailed("[^*]");
                    }
                  }
                  while (result6 !== null) {
                    result5.push(result6);
                    if (/^[^*]/.test(input.charAt(pos))) {
                      result6 = input.charAt(pos);
                      pos++;
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("[^*]");
                      }
                    }
                  }
                  if (result5 !== null) {
                    if (input.charCodeAt(pos) === 42) {
                      result7 = "*";
                      pos += 1;
                    } else {
                      result7 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"*\"");
                      }
                    }
                    if (result7 !== null) {
                      result6 = [];
                      while (result7 !== null) {
                        result6.push(result7);
                        if (input.charCodeAt(pos) === 42) {
                          result7 = "*";
                          pos += 1;
                        } else {
                          result7 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"*\"");
                          }
                        }
                      }
                    } else {
                      result6 = null;
                    }
                    if (result6 !== null) {
                      result4 = [result4, result5, result6];
                    } else {
                      result4 = null;
                      pos = pos2;
                    }
                  } else {
                    result4 = null;
                    pos = pos2;
                  }
                } else {
                  result4 = null;
                  pos = pos2;
                }
              }
              if (result3 !== null) {
                if (input.charCodeAt(pos) === 47) {
                  result4 = "/";
                  pos += 1;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"/\"");
                  }
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(head, middle, tail) {
                  var str = head.concat(middle).join("");
                  tail.forEach(function (e) {
                      str += e[0] + e[1].join("") + e[2].join("");
                  });
                  str = str.slice(0, str.length - 1);
                  
                  if ((str[0] === '{') && (str[str.length-1] === '}')) {
                      str = str.slice(1, str.length - 1);
                      return {
                          type: "comment", elements: ['/*{', {
                              type: "commentTag",
                              elements: str
                          }, '}*/']
                      };
                  }
                  else
                  {
                      return {
                          type: "comment", elements: '/*' + str + '*/'
                      };
                  }
              })(result0[1], result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ident() {
        var cacheKey = 'ident@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 45) {
          result0 = "-";
          pos += 1;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"-\"");
          }
        }
        result0 = result0 !== null ? result0 : '';
        if (result0 !== null) {
          result1 = parse_nmstart();
          if (result1 !== null) {
            result2 = [];
            result3 = parse_nmchar();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_nmchar();
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(dash, nmstart, nmchars) {
                return dash + nmstart + nmchars.join("");
              })(result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_name() {
        var cacheKey = 'name@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        
        pos0 = pos;
        result1 = parse_nmchar();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_nmchar();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(nmchars) { return nmchars.join(""); })(result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_num() {
        var cacheKey = 'num@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        
        result0 = parse_float();
        if (result0 === null) {
          result0 = parse_integer();
          
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_string() {
        var cacheKey = 'string@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        
        result0 = parse_string1();
        if (result0 === null) {
          result0 = parse_string2();
          
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_url() {
        var cacheKey = 'url@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        
        pos0 = pos;
        result0 = [];
        if (/^[!#$%&*-~]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[!#$%&*-~]");
          }
        }
        if (result1 === null) {
          result1 = parse_nonascii();
          if (result1 === null) {
            result1 = parse_escape();
            
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (/^[!#$%&*-~]/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[!#$%&*-~]");
            }
          }
          if (result1 === null) {
            result1 = parse_nonascii();
            if (result1 === null) {
              result1 = parse_escape();
              
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(chars) { return chars.join(""); })(result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_s() {
        var cacheKey = 's@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0;
        
        
        if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\t\\r\\n\\f]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[ \\t\\r\\n\\f]");
              }
            }
          }
        } else {
          result0 = null;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_w() {
        var cacheKey = 'w@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        
        result0 = parse_s();
        result0 = result0 !== null ? result0 : '';
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_nl() {
        var cacheKey = 'nl@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        
        if (input.charCodeAt(pos) === 10) {
          result0 = "\n";
          pos += 1;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\n\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 2) === "\r\n") {
            result0 = "\r\n";
            pos += 2;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\r\\n\"");
            }
          }
          if (result0 === null) {
            if (input.charCodeAt(pos) === 13) {
              result0 = "\r";
              pos += 1;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\r\"");
              }
            }
            if (result0 === null) {
              if (input.charCodeAt(pos) === 12) {
                result0 = "\f";
                pos += 1;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\f\"");
                }
              }
              
            }
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_A() {
        var cacheKey = 'A@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1, pos2;
        
        
        if (/^[aA]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[aA]");
          }
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.charCodeAt(pos) === 92) {
            result0 = "\\";
            pos += 1;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\"");
            }
          }
          if (result0 !== null) {
            if (input.charCodeAt(pos) === 48) {
              result1 = "0";
              pos += 1;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"0\"");
              }
            }
            result1 = result1 !== null ? result1 : '';
            if (result1 !== null) {
              if (input.charCodeAt(pos) === 48) {
                result2 = "0";
                pos += 1;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"0\"");
                }
              }
              result2 = result2 !== null ? result2 : '';
              if (result2 !== null) {
                if (input.charCodeAt(pos) === 48) {
                  result3 = "0";
                  pos += 1;
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"0\"");
                  }
                }
                result3 = result3 !== null ? result3 : '';
                if (result3 !== null) {
                  if (input.charCodeAt(pos) === 48) {
                    result4 = "0";
                    pos += 1;
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"0\"");
                    }
                  }
                  result4 = result4 !== null ? result4 : '';
                  if (result4 !== null) {
                    if (input.substr(pos, 2) === "41") {
                      result5 = "41";
                      pos += 2;
                    } else {
                      result5 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"41\"");
                      }
                    }
                    if (result5 !== null) {
                      if (input.substr(pos, 2) === "\r\n") {
                        result6 = "\r\n";
                        pos += 2;
                      } else {
                        result6 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"\\r\\n\"");
                        }
                      }
                      if (result6 === null) {
                        if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
                          result6 = input.charAt(pos);
                          pos++;
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("[ \\t\\r\\n\\f]");
                          }
                        }
                        
                      }
                      result6 = result6 !== null ? result6 : '';
                      if (result6 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function() { return "A"; })();
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            if (input.charCodeAt(pos) === 92) {
              result0 = "\\";
              pos += 1;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\\\"");
              }
            }
            if (result0 !== null) {
              if (input.charCodeAt(pos) === 48) {
                result1 = "0";
                pos += 1;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"0\"");
                }
              }
              result1 = result1 !== null ? result1 : '';
              if (result1 !== null) {
                if (input.charCodeAt(pos) === 48) {
                  result2 = "0";
                  pos += 1;
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"0\"");
                  }
                }
                result2 = result2 !== null ? result2 : '';
                if (result2 !== null) {
                  if (input.charCodeAt(pos) === 48) {
                    result3 = "0";
                    pos += 1;
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"0\"");
                    }
                  }
                  result3 = result3 !== null ? result3 : '';
                  if (result3 !== null) {
                    if (input.charCodeAt(pos) === 48) {
                      result4 = "0";
                      pos += 1;
                    } else {
                      result4 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"0\"");
                      }
                    }
                    result4 = result4 !== null ? result4 : '';
                    if (result4 !== null) {
                      if (input.substr(pos, 2) === "61") {
                        result5 = "61";
                        pos += 2;
                      } else {
                        result5 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"61\"");
                        }
                      }
                      if (result5 !== null) {
                        if (input.substr(pos, 2) === "\r\n") {
                          result6 = "\r\n";
                          pos += 2;
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"\\r\\n\"");
                          }
                        }
                        if (result6 === null) {
                          if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
                            result6 = input.charAt(pos);
                            pos++;
                          } else {
                            result6 = null;
                            if (reportFailures === 0) {
                              matchFailed("[ \\t\\r\\n\\f]");
                            }
                          }
                          
                        }
                        result6 = result6 !== null ? result6 : '';
                        if (result6 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function() { return "a"; })();
            }
            if (result0 === null) {
              pos = pos0;
            }
            
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_C() {
        var cacheKey = 'C@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1, pos2;
        
        
        if (/^[cC]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[cC]");
          }
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.charCodeAt(pos) === 92) {
            result0 = "\\";
            pos += 1;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\"");
            }
          }
          if (result0 !== null) {
            if (input.charCodeAt(pos) === 48) {
              result1 = "0";
              pos += 1;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"0\"");
              }
            }
            result1 = result1 !== null ? result1 : '';
            if (result1 !== null) {
              if (input.charCodeAt(pos) === 48) {
                result2 = "0";
                pos += 1;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"0\"");
                }
              }
              result2 = result2 !== null ? result2 : '';
              if (result2 !== null) {
                if (input.charCodeAt(pos) === 48) {
                  result3 = "0";
                  pos += 1;
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"0\"");
                  }
                }
                result3 = result3 !== null ? result3 : '';
                if (result3 !== null) {
                  if (input.charCodeAt(pos) === 48) {
                    result4 = "0";
                    pos += 1;
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"0\"");
                    }
                  }
                  result4 = result4 !== null ? result4 : '';
                  if (result4 !== null) {
                    if (input.substr(pos, 2) === "43") {
                      result5 = "43";
                      pos += 2;
                    } else {
                      result5 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"43\"");
                      }
                    }
                    if (result5 !== null) {
                      if (input.substr(pos, 2) === "\r\n") {
                        result6 = "\r\n";
                        pos += 2;
                      } else {
                        result6 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"\\r\\n\"");
                        }
                      }
                      if (result6 === null) {
                        if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
                          result6 = input.charAt(pos);
                          pos++;
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("[ \\t\\r\\n\\f]");
                          }
                        }
                        
                      }
                      result6 = result6 !== null ? result6 : '';
                      if (result6 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function() { return "C"; })();
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            if (input.charCodeAt(pos) === 92) {
              result0 = "\\";
              pos += 1;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\\\"");
              }
            }
            if (result0 !== null) {
              if (input.charCodeAt(pos) === 48) {
                result1 = "0";
                pos += 1;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"0\"");
                }
              }
              result1 = result1 !== null ? result1 : '';
              if (result1 !== null) {
                if (input.charCodeAt(pos) === 48) {
                  result2 = "0";
                  pos += 1;
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"0\"");
                  }
                }
                result2 = result2 !== null ? result2 : '';
                if (result2 !== null) {
                  if (input.charCodeAt(pos) === 48) {
                    result3 = "0";
                    pos += 1;
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"0\"");
                    }
                  }
                  result3 = result3 !== null ? result3 : '';
                  if (result3 !== null) {
                    if (input.charCodeAt(pos) === 48) {
                      result4 = "0";
                      pos += 1;
                    } else {
                      result4 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"0\"");
                      }
                    }
                    result4 = result4 !== null ? result4 : '';
                    if (result4 !== null) {
                      if (input.substr(pos, 2) === "63") {
                        result5 = "63";
                        pos += 2;
                      } else {
                        result5 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"63\"");
                        }
                      }
                      if (result5 !== null) {
                        if (input.substr(pos, 2) === "\r\n") {
                          result6 = "\r\n";
                          pos += 2;
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"\\r\\n\"");
                          }
                        }
                        if (result6 === null) {
                          if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
                            result6 = input.charAt(pos);
                            pos++;
                          } else {
                            result6 = null;
                            if (reportFailures === 0) {
                              matchFailed("[ \\t\\r\\n\\f]");
                            }
                          }
                          
                        }
                        result6 = result6 !== null ? result6 : '';
                        if (result6 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function() { return "c"; })();
            }
            if (result0 === null) {
              pos = pos0;
            }
            
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_D() {
        var cacheKey = 'D@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1, pos2;
        
        
        if (/^[dD]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[dD]");
          }
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.charCodeAt(pos) === 92) {
            result0 = "\\";
            pos += 1;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\"");
            }
          }
          if (result0 !== null) {
            if (input.charCodeAt(pos) === 48) {
              result1 = "0";
              pos += 1;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"0\"");
              }
            }
            result1 = result1 !== null ? result1 : '';
            if (result1 !== null) {
              if (input.charCodeAt(pos) === 48) {
                result2 = "0";
                pos += 1;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"0\"");
                }
              }
              result2 = result2 !== null ? result2 : '';
              if (result2 !== null) {
                if (input.charCodeAt(pos) === 48) {
                  result3 = "0";
                  pos += 1;
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"0\"");
                  }
                }
                result3 = result3 !== null ? result3 : '';
                if (result3 !== null) {
                  if (input.charCodeAt(pos) === 48) {
                    result4 = "0";
                    pos += 1;
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"0\"");
                    }
                  }
                  result4 = result4 !== null ? result4 : '';
                  if (result4 !== null) {
                    if (input.substr(pos, 2) === "44") {
                      result5 = "44";
                      pos += 2;
                    } else {
                      result5 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"44\"");
                      }
                    }
                    if (result5 !== null) {
                      if (input.substr(pos, 2) === "\r\n") {
                        result6 = "\r\n";
                        pos += 2;
                      } else {
                        result6 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"\\r\\n\"");
                        }
                      }
                      if (result6 === null) {
                        if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
                          result6 = input.charAt(pos);
                          pos++;
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("[ \\t\\r\\n\\f]");
                          }
                        }
                        
                      }
                      result6 = result6 !== null ? result6 : '';
                      if (result6 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function() { return "D"; })();
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            if (input.charCodeAt(pos) === 92) {
              result0 = "\\";
              pos += 1;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\\\"");
              }
            }
            if (result0 !== null) {
              if (input.charCodeAt(pos) === 48) {
                result1 = "0";
                pos += 1;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"0\"");
                }
              }
              result1 = result1 !== null ? result1 : '';
              if (result1 !== null) {
                if (input.charCodeAt(pos) === 48) {
                  result2 = "0";
                  pos += 1;
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"0\"");
                  }
                }
                result2 = result2 !== null ? result2 : '';
                if (result2 !== null) {
                  if (input.charCodeAt(pos) === 48) {
                    result3 = "0";
                    pos += 1;
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"0\"");
                    }
                  }
                  result3 = result3 !== null ? result3 : '';
                  if (result3 !== null) {
                    if (input.charCodeAt(pos) === 48) {
                      result4 = "0";
                      pos += 1;
                    } else {
                      result4 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"0\"");
                      }
                    }
                    result4 = result4 !== null ? result4 : '';
                    if (result4 !== null) {
                      if (input.substr(pos, 2) === "64") {
                        result5 = "64";
                        pos += 2;
                      } else {
                        result5 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"64\"");
                        }
                      }
                      if (result5 !== null) {
                        if (input.substr(pos, 2) === "\r\n") {
                          result6 = "\r\n";
                          pos += 2;
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"\\r\\n\"");
                          }
                        }
                        if (result6 === null) {
                          if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
                            result6 = input.charAt(pos);
                            pos++;
                          } else {
                            result6 = null;
                            if (reportFailures === 0) {
                              matchFailed("[ \\t\\r\\n\\f]");
                            }
                          }
                          
                        }
                        result6 = result6 !== null ? result6 : '';
                        if (result6 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function() { return "d"; })();
            }
            if (result0 === null) {
              pos = pos0;
            }
            
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_E() {
        var cacheKey = 'E@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1, pos2;
        
        
        if (/^[eE]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[eE]");
          }
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.charCodeAt(pos) === 92) {
            result0 = "\\";
            pos += 1;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\"");
            }
          }
          if (result0 !== null) {
            if (input.charCodeAt(pos) === 48) {
              result1 = "0";
              pos += 1;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"0\"");
              }
            }
            result1 = result1 !== null ? result1 : '';
            if (result1 !== null) {
              if (input.charCodeAt(pos) === 48) {
                result2 = "0";
                pos += 1;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"0\"");
                }
              }
              result2 = result2 !== null ? result2 : '';
              if (result2 !== null) {
                if (input.charCodeAt(pos) === 48) {
                  result3 = "0";
                  pos += 1;
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"0\"");
                  }
                }
                result3 = result3 !== null ? result3 : '';
                if (result3 !== null) {
                  if (input.charCodeAt(pos) === 48) {
                    result4 = "0";
                    pos += 1;
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"0\"");
                    }
                  }
                  result4 = result4 !== null ? result4 : '';
                  if (result4 !== null) {
                    if (input.substr(pos, 2) === "45") {
                      result5 = "45";
                      pos += 2;
                    } else {
                      result5 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"45\"");
                      }
                    }
                    if (result5 !== null) {
                      if (input.substr(pos, 2) === "\r\n") {
                        result6 = "\r\n";
                        pos += 2;
                      } else {
                        result6 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"\\r\\n\"");
                        }
                      }
                      if (result6 === null) {
                        if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
                          result6 = input.charAt(pos);
                          pos++;
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("[ \\t\\r\\n\\f]");
                          }
                        }
                        
                      }
                      result6 = result6 !== null ? result6 : '';
                      if (result6 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function() { return "E"; })();
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            if (input.charCodeAt(pos) === 92) {
              result0 = "\\";
              pos += 1;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\\\"");
              }
            }
            if (result0 !== null) {
              if (input.charCodeAt(pos) === 48) {
                result1 = "0";
                pos += 1;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"0\"");
                }
              }
              result1 = result1 !== null ? result1 : '';
              if (result1 !== null) {
                if (input.charCodeAt(pos) === 48) {
                  result2 = "0";
                  pos += 1;
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"0\"");
                  }
                }
                result2 = result2 !== null ? result2 : '';
                if (result2 !== null) {
                  if (input.charCodeAt(pos) === 48) {
                    result3 = "0";
                    pos += 1;
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"0\"");
                    }
                  }
                  result3 = result3 !== null ? result3 : '';
                  if (result3 !== null) {
                    if (input.charCodeAt(pos) === 48) {
                      result4 = "0";
                      pos += 1;
                    } else {
                      result4 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"0\"");
                      }
                    }
                    result4 = result4 !== null ? result4 : '';
                    if (result4 !== null) {
                      if (input.substr(pos, 2) === "65") {
                        result5 = "65";
                        pos += 2;
                      } else {
                        result5 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"65\"");
                        }
                      }
                      if (result5 !== null) {
                        if (input.substr(pos, 2) === "\r\n") {
                          result6 = "\r\n";
                          pos += 2;
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"\\r\\n\"");
                          }
                        }
                        if (result6 === null) {
                          if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
                            result6 = input.charAt(pos);
                            pos++;
                          } else {
                            result6 = null;
                            if (reportFailures === 0) {
                              matchFailed("[ \\t\\r\\n\\f]");
                            }
                          }
                          
                        }
                        result6 = result6 !== null ? result6 : '';
                        if (result6 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function() { return "e"; })();
            }
            if (result0 === null) {
              pos = pos0;
            }
            
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_G() {
        var cacheKey = 'G@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1, pos2;
        
        
        if (/^[gG]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[gG]");
          }
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.charCodeAt(pos) === 92) {
            result0 = "\\";
            pos += 1;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\"");
            }
          }
          if (result0 !== null) {
            if (input.charCodeAt(pos) === 48) {
              result1 = "0";
              pos += 1;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"0\"");
              }
            }
            result1 = result1 !== null ? result1 : '';
            if (result1 !== null) {
              if (input.charCodeAt(pos) === 48) {
                result2 = "0";
                pos += 1;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"0\"");
                }
              }
              result2 = result2 !== null ? result2 : '';
              if (result2 !== null) {
                if (input.charCodeAt(pos) === 48) {
                  result3 = "0";
                  pos += 1;
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"0\"");
                  }
                }
                result3 = result3 !== null ? result3 : '';
                if (result3 !== null) {
                  if (input.charCodeAt(pos) === 48) {
                    result4 = "0";
                    pos += 1;
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"0\"");
                    }
                  }
                  result4 = result4 !== null ? result4 : '';
                  if (result4 !== null) {
                    if (input.substr(pos, 2) === "47") {
                      result5 = "47";
                      pos += 2;
                    } else {
                      result5 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"47\"");
                      }
                    }
                    if (result5 !== null) {
                      if (input.substr(pos, 2) === "\r\n") {
                        result6 = "\r\n";
                        pos += 2;
                      } else {
                        result6 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"\\r\\n\"");
                        }
                      }
                      if (result6 === null) {
                        if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
                          result6 = input.charAt(pos);
                          pos++;
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("[ \\t\\r\\n\\f]");
                          }
                        }
                        
                      }
                      result6 = result6 !== null ? result6 : '';
                      if (result6 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function() { return "G"; })();
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            if (input.charCodeAt(pos) === 92) {
              result0 = "\\";
              pos += 1;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\\\"");
              }
            }
            if (result0 !== null) {
              if (input.charCodeAt(pos) === 48) {
                result1 = "0";
                pos += 1;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"0\"");
                }
              }
              result1 = result1 !== null ? result1 : '';
              if (result1 !== null) {
                if (input.charCodeAt(pos) === 48) {
                  result2 = "0";
                  pos += 1;
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"0\"");
                  }
                }
                result2 = result2 !== null ? result2 : '';
                if (result2 !== null) {
                  if (input.charCodeAt(pos) === 48) {
                    result3 = "0";
                    pos += 1;
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"0\"");
                    }
                  }
                  result3 = result3 !== null ? result3 : '';
                  if (result3 !== null) {
                    if (input.charCodeAt(pos) === 48) {
                      result4 = "0";
                      pos += 1;
                    } else {
                      result4 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"0\"");
                      }
                    }
                    result4 = result4 !== null ? result4 : '';
                    if (result4 !== null) {
                      if (input.substr(pos, 2) === "67") {
                        result5 = "67";
                        pos += 2;
                      } else {
                        result5 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"67\"");
                        }
                      }
                      if (result5 !== null) {
                        if (input.substr(pos, 2) === "\r\n") {
                          result6 = "\r\n";
                          pos += 2;
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"\\r\\n\"");
                          }
                        }
                        if (result6 === null) {
                          if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
                            result6 = input.charAt(pos);
                            pos++;
                          } else {
                            result6 = null;
                            if (reportFailures === 0) {
                              matchFailed("[ \\t\\r\\n\\f]");
                            }
                          }
                          
                        }
                        result6 = result6 !== null ? result6 : '';
                        if (result6 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function() { return "g"; })();
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              if (input.charCodeAt(pos) === 92) {
                result0 = "\\";
                pos += 1;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\\\"");
                }
              }
              if (result0 !== null) {
                if (/^[gG]/.test(input.charAt(pos))) {
                  result1 = input.charAt(pos);
                  pos++;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("[gG]");
                  }
                }
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(char_) { return char_; })(result0[1]);
              }
              if (result0 === null) {
                pos = pos0;
              }
              
            }
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_H() {
        var cacheKey = 'H@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1, pos2;
        
        
        if (/^[hH]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[hH]");
          }
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.charCodeAt(pos) === 92) {
            result0 = "\\";
            pos += 1;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\"");
            }
          }
          if (result0 !== null) {
            if (input.charCodeAt(pos) === 48) {
              result1 = "0";
              pos += 1;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"0\"");
              }
            }
            result1 = result1 !== null ? result1 : '';
            if (result1 !== null) {
              if (input.charCodeAt(pos) === 48) {
                result2 = "0";
                pos += 1;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"0\"");
                }
              }
              result2 = result2 !== null ? result2 : '';
              if (result2 !== null) {
                if (input.charCodeAt(pos) === 48) {
                  result3 = "0";
                  pos += 1;
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"0\"");
                  }
                }
                result3 = result3 !== null ? result3 : '';
                if (result3 !== null) {
                  if (input.charCodeAt(pos) === 48) {
                    result4 = "0";
                    pos += 1;
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"0\"");
                    }
                  }
                  result4 = result4 !== null ? result4 : '';
                  if (result4 !== null) {
                    if (input.substr(pos, 2) === "48") {
                      result5 = "48";
                      pos += 2;
                    } else {
                      result5 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"48\"");
                      }
                    }
                    if (result5 !== null) {
                      if (input.substr(pos, 2) === "\r\n") {
                        result6 = "\r\n";
                        pos += 2;
                      } else {
                        result6 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"\\r\\n\"");
                        }
                      }
                      if (result6 === null) {
                        if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
                          result6 = input.charAt(pos);
                          pos++;
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("[ \\t\\r\\n\\f]");
                          }
                        }
                        
                      }
                      result6 = result6 !== null ? result6 : '';
                      if (result6 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function() { return "H"; })();
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            if (input.charCodeAt(pos) === 92) {
              result0 = "\\";
              pos += 1;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\\\"");
              }
            }
            if (result0 !== null) {
              if (input.charCodeAt(pos) === 48) {
                result1 = "0";
                pos += 1;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"0\"");
                }
              }
              result1 = result1 !== null ? result1 : '';
              if (result1 !== null) {
                if (input.charCodeAt(pos) === 48) {
                  result2 = "0";
                  pos += 1;
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"0\"");
                  }
                }
                result2 = result2 !== null ? result2 : '';
                if (result2 !== null) {
                  if (input.charCodeAt(pos) === 48) {
                    result3 = "0";
                    pos += 1;
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"0\"");
                    }
                  }
                  result3 = result3 !== null ? result3 : '';
                  if (result3 !== null) {
                    if (input.charCodeAt(pos) === 48) {
                      result4 = "0";
                      pos += 1;
                    } else {
                      result4 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"0\"");
                      }
                    }
                    result4 = result4 !== null ? result4 : '';
                    if (result4 !== null) {
                      if (input.substr(pos, 2) === "68") {
                        result5 = "68";
                        pos += 2;
                      } else {
                        result5 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"68\"");
                        }
                      }
                      if (result5 !== null) {
                        if (input.substr(pos, 2) === "\r\n") {
                          result6 = "\r\n";
                          pos += 2;
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"\\r\\n\"");
                          }
                        }
                        if (result6 === null) {
                          if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
                            result6 = input.charAt(pos);
                            pos++;
                          } else {
                            result6 = null;
                            if (reportFailures === 0) {
                              matchFailed("[ \\t\\r\\n\\f]");
                            }
                          }
                          
                        }
                        result6 = result6 !== null ? result6 : '';
                        if (result6 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function() { return "h"; })();
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              if (input.charCodeAt(pos) === 92) {
                result0 = "\\";
                pos += 1;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\\\"");
                }
              }
              if (result0 !== null) {
                if (/^[hH]/.test(input.charAt(pos))) {
                  result1 = input.charAt(pos);
                  pos++;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("[hH]");
                  }
                }
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(char_) { return char_; })(result0[1]);
              }
              if (result0 === null) {
                pos = pos0;
              }
              
            }
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_I() {
        var cacheKey = 'I@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1, pos2;
        
        
        if (/^[iI]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[iI]");
          }
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.charCodeAt(pos) === 92) {
            result0 = "\\";
            pos += 1;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\"");
            }
          }
          if (result0 !== null) {
            if (input.charCodeAt(pos) === 48) {
              result1 = "0";
              pos += 1;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"0\"");
              }
            }
            result1 = result1 !== null ? result1 : '';
            if (result1 !== null) {
              if (input.charCodeAt(pos) === 48) {
                result2 = "0";
                pos += 1;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"0\"");
                }
              }
              result2 = result2 !== null ? result2 : '';
              if (result2 !== null) {
                if (input.charCodeAt(pos) === 48) {
                  result3 = "0";
                  pos += 1;
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"0\"");
                  }
                }
                result3 = result3 !== null ? result3 : '';
                if (result3 !== null) {
                  if (input.charCodeAt(pos) === 48) {
                    result4 = "0";
                    pos += 1;
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"0\"");
                    }
                  }
                  result4 = result4 !== null ? result4 : '';
                  if (result4 !== null) {
                    if (input.substr(pos, 2) === "49") {
                      result5 = "49";
                      pos += 2;
                    } else {
                      result5 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"49\"");
                      }
                    }
                    if (result5 !== null) {
                      if (input.substr(pos, 2) === "\r\n") {
                        result6 = "\r\n";
                        pos += 2;
                      } else {
                        result6 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"\\r\\n\"");
                        }
                      }
                      if (result6 === null) {
                        if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
                          result6 = input.charAt(pos);
                          pos++;
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("[ \\t\\r\\n\\f]");
                          }
                        }
                        
                      }
                      result6 = result6 !== null ? result6 : '';
                      if (result6 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function() { return "I"; })();
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            if (input.charCodeAt(pos) === 92) {
              result0 = "\\";
              pos += 1;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\\\"");
              }
            }
            if (result0 !== null) {
              if (input.charCodeAt(pos) === 48) {
                result1 = "0";
                pos += 1;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"0\"");
                }
              }
              result1 = result1 !== null ? result1 : '';
              if (result1 !== null) {
                if (input.charCodeAt(pos) === 48) {
                  result2 = "0";
                  pos += 1;
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"0\"");
                  }
                }
                result2 = result2 !== null ? result2 : '';
                if (result2 !== null) {
                  if (input.charCodeAt(pos) === 48) {
                    result3 = "0";
                    pos += 1;
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"0\"");
                    }
                  }
                  result3 = result3 !== null ? result3 : '';
                  if (result3 !== null) {
                    if (input.charCodeAt(pos) === 48) {
                      result4 = "0";
                      pos += 1;
                    } else {
                      result4 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"0\"");
                      }
                    }
                    result4 = result4 !== null ? result4 : '';
                    if (result4 !== null) {
                      if (input.substr(pos, 2) === "69") {
                        result5 = "69";
                        pos += 2;
                      } else {
                        result5 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"69\"");
                        }
                      }
                      if (result5 !== null) {
                        if (input.substr(pos, 2) === "\r\n") {
                          result6 = "\r\n";
                          pos += 2;
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"\\r\\n\"");
                          }
                        }
                        if (result6 === null) {
                          if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
                            result6 = input.charAt(pos);
                            pos++;
                          } else {
                            result6 = null;
                            if (reportFailures === 0) {
                              matchFailed("[ \\t\\r\\n\\f]");
                            }
                          }
                          
                        }
                        result6 = result6 !== null ? result6 : '';
                        if (result6 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function() { return "i"; })();
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              if (input.charCodeAt(pos) === 92) {
                result0 = "\\";
                pos += 1;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\\\"");
                }
              }
              if (result0 !== null) {
                if (/^[iI]/.test(input.charAt(pos))) {
                  result1 = input.charAt(pos);
                  pos++;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("[iI]");
                  }
                }
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(char_) { return char_; })(result0[1]);
              }
              if (result0 === null) {
                pos = pos0;
              }
              
            }
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_K() {
        var cacheKey = 'K@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1, pos2;
        
        
        if (/^[kK]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[kK]");
          }
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.charCodeAt(pos) === 92) {
            result0 = "\\";
            pos += 1;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\"");
            }
          }
          if (result0 !== null) {
            if (input.charCodeAt(pos) === 48) {
              result1 = "0";
              pos += 1;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"0\"");
              }
            }
            result1 = result1 !== null ? result1 : '';
            if (result1 !== null) {
              if (input.charCodeAt(pos) === 48) {
                result2 = "0";
                pos += 1;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"0\"");
                }
              }
              result2 = result2 !== null ? result2 : '';
              if (result2 !== null) {
                if (input.charCodeAt(pos) === 48) {
                  result3 = "0";
                  pos += 1;
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"0\"");
                  }
                }
                result3 = result3 !== null ? result3 : '';
                if (result3 !== null) {
                  if (input.charCodeAt(pos) === 48) {
                    result4 = "0";
                    pos += 1;
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"0\"");
                    }
                  }
                  result4 = result4 !== null ? result4 : '';
                  if (result4 !== null) {
                    if (input.charCodeAt(pos) === 52) {
                      result5 = "4";
                      pos += 1;
                    } else {
                      result5 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"4\"");
                      }
                    }
                    if (result5 !== null) {
                      if (/^[bB]/.test(input.charAt(pos))) {
                        result6 = input.charAt(pos);
                        pos++;
                      } else {
                        result6 = null;
                        if (reportFailures === 0) {
                          matchFailed("[bB]");
                        }
                      }
                      if (result6 !== null) {
                        if (input.substr(pos, 2) === "\r\n") {
                          result7 = "\r\n";
                          pos += 2;
                        } else {
                          result7 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"\\r\\n\"");
                          }
                        }
                        if (result7 === null) {
                          if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
                            result7 = input.charAt(pos);
                            pos++;
                          } else {
                            result7 = null;
                            if (reportFailures === 0) {
                              matchFailed("[ \\t\\r\\n\\f]");
                            }
                          }
                          
                        }
                        result7 = result7 !== null ? result7 : '';
                        if (result7 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function() { return "K"; })();
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            if (input.charCodeAt(pos) === 92) {
              result0 = "\\";
              pos += 1;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\\\"");
              }
            }
            if (result0 !== null) {
              if (input.charCodeAt(pos) === 48) {
                result1 = "0";
                pos += 1;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"0\"");
                }
              }
              result1 = result1 !== null ? result1 : '';
              if (result1 !== null) {
                if (input.charCodeAt(pos) === 48) {
                  result2 = "0";
                  pos += 1;
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"0\"");
                  }
                }
                result2 = result2 !== null ? result2 : '';
                if (result2 !== null) {
                  if (input.charCodeAt(pos) === 48) {
                    result3 = "0";
                    pos += 1;
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"0\"");
                    }
                  }
                  result3 = result3 !== null ? result3 : '';
                  if (result3 !== null) {
                    if (input.charCodeAt(pos) === 48) {
                      result4 = "0";
                      pos += 1;
                    } else {
                      result4 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"0\"");
                      }
                    }
                    result4 = result4 !== null ? result4 : '';
                    if (result4 !== null) {
                      if (input.charCodeAt(pos) === 54) {
                        result5 = "6";
                        pos += 1;
                      } else {
                        result5 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"6\"");
                        }
                      }
                      if (result5 !== null) {
                        if (/^[bB]/.test(input.charAt(pos))) {
                          result6 = input.charAt(pos);
                          pos++;
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("[bB]");
                          }
                        }
                        if (result6 !== null) {
                          if (input.substr(pos, 2) === "\r\n") {
                            result7 = "\r\n";
                            pos += 2;
                          } else {
                            result7 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"\\r\\n\"");
                            }
                          }
                          if (result7 === null) {
                            if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
                              result7 = input.charAt(pos);
                              pos++;
                            } else {
                              result7 = null;
                              if (reportFailures === 0) {
                                matchFailed("[ \\t\\r\\n\\f]");
                              }
                            }
                            
                          }
                          result7 = result7 !== null ? result7 : '';
                          if (result7 !== null) {
                            result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function() { return "k"; })();
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              if (input.charCodeAt(pos) === 92) {
                result0 = "\\";
                pos += 1;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\\\"");
                }
              }
              if (result0 !== null) {
                if (/^[kK]/.test(input.charAt(pos))) {
                  result1 = input.charAt(pos);
                  pos++;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("[kK]");
                  }
                }
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(char_) { return char_; })(result0[1]);
              }
              if (result0 === null) {
                pos = pos0;
              }
              
            }
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_L() {
        var cacheKey = 'L@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1, pos2;
        
        
        if (/^[lL]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[lL]");
          }
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.charCodeAt(pos) === 92) {
            result0 = "\\";
            pos += 1;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\"");
            }
          }
          if (result0 !== null) {
            if (input.charCodeAt(pos) === 48) {
              result1 = "0";
              pos += 1;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"0\"");
              }
            }
            result1 = result1 !== null ? result1 : '';
            if (result1 !== null) {
              if (input.charCodeAt(pos) === 48) {
                result2 = "0";
                pos += 1;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"0\"");
                }
              }
              result2 = result2 !== null ? result2 : '';
              if (result2 !== null) {
                if (input.charCodeAt(pos) === 48) {
                  result3 = "0";
                  pos += 1;
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"0\"");
                  }
                }
                result3 = result3 !== null ? result3 : '';
                if (result3 !== null) {
                  if (input.charCodeAt(pos) === 48) {
                    result4 = "0";
                    pos += 1;
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"0\"");
                    }
                  }
                  result4 = result4 !== null ? result4 : '';
                  if (result4 !== null) {
                    if (input.charCodeAt(pos) === 52) {
                      result5 = "4";
                      pos += 1;
                    } else {
                      result5 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"4\"");
                      }
                    }
                    if (result5 !== null) {
                      if (/^[cC]/.test(input.charAt(pos))) {
                        result6 = input.charAt(pos);
                        pos++;
                      } else {
                        result6 = null;
                        if (reportFailures === 0) {
                          matchFailed("[cC]");
                        }
                      }
                      if (result6 !== null) {
                        if (input.substr(pos, 2) === "\r\n") {
                          result7 = "\r\n";
                          pos += 2;
                        } else {
                          result7 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"\\r\\n\"");
                          }
                        }
                        if (result7 === null) {
                          if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
                            result7 = input.charAt(pos);
                            pos++;
                          } else {
                            result7 = null;
                            if (reportFailures === 0) {
                              matchFailed("[ \\t\\r\\n\\f]");
                            }
                          }
                          
                        }
                        result7 = result7 !== null ? result7 : '';
                        if (result7 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function() { return "L"; })();
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            if (input.charCodeAt(pos) === 92) {
              result0 = "\\";
              pos += 1;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\\\"");
              }
            }
            if (result0 !== null) {
              if (input.charCodeAt(pos) === 48) {
                result1 = "0";
                pos += 1;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"0\"");
                }
              }
              result1 = result1 !== null ? result1 : '';
              if (result1 !== null) {
                if (input.charCodeAt(pos) === 48) {
                  result2 = "0";
                  pos += 1;
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"0\"");
                  }
                }
                result2 = result2 !== null ? result2 : '';
                if (result2 !== null) {
                  if (input.charCodeAt(pos) === 48) {
                    result3 = "0";
                    pos += 1;
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"0\"");
                    }
                  }
                  result3 = result3 !== null ? result3 : '';
                  if (result3 !== null) {
                    if (input.charCodeAt(pos) === 48) {
                      result4 = "0";
                      pos += 1;
                    } else {
                      result4 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"0\"");
                      }
                    }
                    result4 = result4 !== null ? result4 : '';
                    if (result4 !== null) {
                      if (input.charCodeAt(pos) === 54) {
                        result5 = "6";
                        pos += 1;
                      } else {
                        result5 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"6\"");
                        }
                      }
                      if (result5 !== null) {
                        if (/^[cC]/.test(input.charAt(pos))) {
                          result6 = input.charAt(pos);
                          pos++;
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("[cC]");
                          }
                        }
                        if (result6 !== null) {
                          if (input.substr(pos, 2) === "\r\n") {
                            result7 = "\r\n";
                            pos += 2;
                          } else {
                            result7 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"\\r\\n\"");
                            }
                          }
                          if (result7 === null) {
                            if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
                              result7 = input.charAt(pos);
                              pos++;
                            } else {
                              result7 = null;
                              if (reportFailures === 0) {
                                matchFailed("[ \\t\\r\\n\\f]");
                              }
                            }
                            
                          }
                          result7 = result7 !== null ? result7 : '';
                          if (result7 !== null) {
                            result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function() { return "l"; })();
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              if (input.charCodeAt(pos) === 92) {
                result0 = "\\";
                pos += 1;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\\\"");
                }
              }
              if (result0 !== null) {
                if (/^[lL]/.test(input.charAt(pos))) {
                  result1 = input.charAt(pos);
                  pos++;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("[lL]");
                  }
                }
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(char_) { return char_; })(result0[1]);
              }
              if (result0 === null) {
                pos = pos0;
              }
              
            }
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_M() {
        var cacheKey = 'M@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1, pos2;
        
        
        if (/^[mM]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[mM]");
          }
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.charCodeAt(pos) === 92) {
            result0 = "\\";
            pos += 1;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\"");
            }
          }
          if (result0 !== null) {
            if (input.charCodeAt(pos) === 48) {
              result1 = "0";
              pos += 1;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"0\"");
              }
            }
            result1 = result1 !== null ? result1 : '';
            if (result1 !== null) {
              if (input.charCodeAt(pos) === 48) {
                result2 = "0";
                pos += 1;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"0\"");
                }
              }
              result2 = result2 !== null ? result2 : '';
              if (result2 !== null) {
                if (input.charCodeAt(pos) === 48) {
                  result3 = "0";
                  pos += 1;
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"0\"");
                  }
                }
                result3 = result3 !== null ? result3 : '';
                if (result3 !== null) {
                  if (input.charCodeAt(pos) === 48) {
                    result4 = "0";
                    pos += 1;
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"0\"");
                    }
                  }
                  result4 = result4 !== null ? result4 : '';
                  if (result4 !== null) {
                    if (input.charCodeAt(pos) === 52) {
                      result5 = "4";
                      pos += 1;
                    } else {
                      result5 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"4\"");
                      }
                    }
                    if (result5 !== null) {
                      if (/^[dD]/.test(input.charAt(pos))) {
                        result6 = input.charAt(pos);
                        pos++;
                      } else {
                        result6 = null;
                        if (reportFailures === 0) {
                          matchFailed("[dD]");
                        }
                      }
                      if (result6 !== null) {
                        if (input.substr(pos, 2) === "\r\n") {
                          result7 = "\r\n";
                          pos += 2;
                        } else {
                          result7 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"\\r\\n\"");
                          }
                        }
                        if (result7 === null) {
                          if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
                            result7 = input.charAt(pos);
                            pos++;
                          } else {
                            result7 = null;
                            if (reportFailures === 0) {
                              matchFailed("[ \\t\\r\\n\\f]");
                            }
                          }
                          
                        }
                        result7 = result7 !== null ? result7 : '';
                        if (result7 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function() { return "M"; })();
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            if (input.charCodeAt(pos) === 92) {
              result0 = "\\";
              pos += 1;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\\\"");
              }
            }
            if (result0 !== null) {
              if (input.charCodeAt(pos) === 48) {
                result1 = "0";
                pos += 1;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"0\"");
                }
              }
              result1 = result1 !== null ? result1 : '';
              if (result1 !== null) {
                if (input.charCodeAt(pos) === 48) {
                  result2 = "0";
                  pos += 1;
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"0\"");
                  }
                }
                result2 = result2 !== null ? result2 : '';
                if (result2 !== null) {
                  if (input.charCodeAt(pos) === 48) {
                    result3 = "0";
                    pos += 1;
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"0\"");
                    }
                  }
                  result3 = result3 !== null ? result3 : '';
                  if (result3 !== null) {
                    if (input.charCodeAt(pos) === 48) {
                      result4 = "0";
                      pos += 1;
                    } else {
                      result4 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"0\"");
                      }
                    }
                    result4 = result4 !== null ? result4 : '';
                    if (result4 !== null) {
                      if (input.charCodeAt(pos) === 54) {
                        result5 = "6";
                        pos += 1;
                      } else {
                        result5 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"6\"");
                        }
                      }
                      if (result5 !== null) {
                        if (/^[dD]/.test(input.charAt(pos))) {
                          result6 = input.charAt(pos);
                          pos++;
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("[dD]");
                          }
                        }
                        if (result6 !== null) {
                          if (input.substr(pos, 2) === "\r\n") {
                            result7 = "\r\n";
                            pos += 2;
                          } else {
                            result7 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"\\r\\n\"");
                            }
                          }
                          if (result7 === null) {
                            if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
                              result7 = input.charAt(pos);
                              pos++;
                            } else {
                              result7 = null;
                              if (reportFailures === 0) {
                                matchFailed("[ \\t\\r\\n\\f]");
                              }
                            }
                            
                          }
                          result7 = result7 !== null ? result7 : '';
                          if (result7 !== null) {
                            result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function() { return "m"; })();
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              if (input.charCodeAt(pos) === 92) {
                result0 = "\\";
                pos += 1;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\\\"");
                }
              }
              if (result0 !== null) {
                if (/^[mM]/.test(input.charAt(pos))) {
                  result1 = input.charAt(pos);
                  pos++;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("[mM]");
                  }
                }
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(char_) { return char_; })(result0[1]);
              }
              if (result0 === null) {
                pos = pos0;
              }
              
            }
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_N() {
        var cacheKey = 'N@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1, pos2;
        
        
        if (/^[nN]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[nN]");
          }
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.charCodeAt(pos) === 92) {
            result0 = "\\";
            pos += 1;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\"");
            }
          }
          if (result0 !== null) {
            if (input.charCodeAt(pos) === 48) {
              result1 = "0";
              pos += 1;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"0\"");
              }
            }
            result1 = result1 !== null ? result1 : '';
            if (result1 !== null) {
              if (input.charCodeAt(pos) === 48) {
                result2 = "0";
                pos += 1;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"0\"");
                }
              }
              result2 = result2 !== null ? result2 : '';
              if (result2 !== null) {
                if (input.charCodeAt(pos) === 48) {
                  result3 = "0";
                  pos += 1;
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"0\"");
                  }
                }
                result3 = result3 !== null ? result3 : '';
                if (result3 !== null) {
                  if (input.charCodeAt(pos) === 48) {
                    result4 = "0";
                    pos += 1;
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"0\"");
                    }
                  }
                  result4 = result4 !== null ? result4 : '';
                  if (result4 !== null) {
                    if (input.charCodeAt(pos) === 52) {
                      result5 = "4";
                      pos += 1;
                    } else {
                      result5 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"4\"");
                      }
                    }
                    if (result5 !== null) {
                      if (/^[eE]/.test(input.charAt(pos))) {
                        result6 = input.charAt(pos);
                        pos++;
                      } else {
                        result6 = null;
                        if (reportFailures === 0) {
                          matchFailed("[eE]");
                        }
                      }
                      if (result6 !== null) {
                        if (input.substr(pos, 2) === "\r\n") {
                          result7 = "\r\n";
                          pos += 2;
                        } else {
                          result7 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"\\r\\n\"");
                          }
                        }
                        if (result7 === null) {
                          if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
                            result7 = input.charAt(pos);
                            pos++;
                          } else {
                            result7 = null;
                            if (reportFailures === 0) {
                              matchFailed("[ \\t\\r\\n\\f]");
                            }
                          }
                          
                        }
                        result7 = result7 !== null ? result7 : '';
                        if (result7 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function() { return "N"; })();
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            if (input.charCodeAt(pos) === 92) {
              result0 = "\\";
              pos += 1;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\\\"");
              }
            }
            if (result0 !== null) {
              if (input.charCodeAt(pos) === 48) {
                result1 = "0";
                pos += 1;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"0\"");
                }
              }
              result1 = result1 !== null ? result1 : '';
              if (result1 !== null) {
                if (input.charCodeAt(pos) === 48) {
                  result2 = "0";
                  pos += 1;
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"0\"");
                  }
                }
                result2 = result2 !== null ? result2 : '';
                if (result2 !== null) {
                  if (input.charCodeAt(pos) === 48) {
                    result3 = "0";
                    pos += 1;
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"0\"");
                    }
                  }
                  result3 = result3 !== null ? result3 : '';
                  if (result3 !== null) {
                    if (input.charCodeAt(pos) === 48) {
                      result4 = "0";
                      pos += 1;
                    } else {
                      result4 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"0\"");
                      }
                    }
                    result4 = result4 !== null ? result4 : '';
                    if (result4 !== null) {
                      if (input.charCodeAt(pos) === 54) {
                        result5 = "6";
                        pos += 1;
                      } else {
                        result5 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"6\"");
                        }
                      }
                      if (result5 !== null) {
                        if (/^[eE]/.test(input.charAt(pos))) {
                          result6 = input.charAt(pos);
                          pos++;
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("[eE]");
                          }
                        }
                        if (result6 !== null) {
                          if (input.substr(pos, 2) === "\r\n") {
                            result7 = "\r\n";
                            pos += 2;
                          } else {
                            result7 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"\\r\\n\"");
                            }
                          }
                          if (result7 === null) {
                            if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
                              result7 = input.charAt(pos);
                              pos++;
                            } else {
                              result7 = null;
                              if (reportFailures === 0) {
                                matchFailed("[ \\t\\r\\n\\f]");
                              }
                            }
                            
                          }
                          result7 = result7 !== null ? result7 : '';
                          if (result7 !== null) {
                            result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function() { return "n"; })();
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              if (input.charCodeAt(pos) === 92) {
                result0 = "\\";
                pos += 1;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\\\"");
                }
              }
              if (result0 !== null) {
                if (/^[nN]/.test(input.charAt(pos))) {
                  result1 = input.charAt(pos);
                  pos++;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("[nN]");
                  }
                }
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(char_) { return char_; })(result0[1]);
              }
              if (result0 === null) {
                pos = pos0;
              }
              
            }
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_O() {
        var cacheKey = 'O@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1, pos2;
        
        
        if (/^[oO]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[oO]");
          }
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.charCodeAt(pos) === 92) {
            result0 = "\\";
            pos += 1;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\"");
            }
          }
          if (result0 !== null) {
            if (input.charCodeAt(pos) === 48) {
              result1 = "0";
              pos += 1;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"0\"");
              }
            }
            result1 = result1 !== null ? result1 : '';
            if (result1 !== null) {
              if (input.charCodeAt(pos) === 48) {
                result2 = "0";
                pos += 1;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"0\"");
                }
              }
              result2 = result2 !== null ? result2 : '';
              if (result2 !== null) {
                if (input.charCodeAt(pos) === 48) {
                  result3 = "0";
                  pos += 1;
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"0\"");
                  }
                }
                result3 = result3 !== null ? result3 : '';
                if (result3 !== null) {
                  if (input.charCodeAt(pos) === 48) {
                    result4 = "0";
                    pos += 1;
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"0\"");
                    }
                  }
                  result4 = result4 !== null ? result4 : '';
                  if (result4 !== null) {
                    if (input.charCodeAt(pos) === 52) {
                      result5 = "4";
                      pos += 1;
                    } else {
                      result5 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"4\"");
                      }
                    }
                    if (result5 !== null) {
                      if (/^[fF]/.test(input.charAt(pos))) {
                        result6 = input.charAt(pos);
                        pos++;
                      } else {
                        result6 = null;
                        if (reportFailures === 0) {
                          matchFailed("[fF]");
                        }
                      }
                      if (result6 !== null) {
                        if (input.substr(pos, 2) === "\r\n") {
                          result7 = "\r\n";
                          pos += 2;
                        } else {
                          result7 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"\\r\\n\"");
                          }
                        }
                        if (result7 === null) {
                          if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
                            result7 = input.charAt(pos);
                            pos++;
                          } else {
                            result7 = null;
                            if (reportFailures === 0) {
                              matchFailed("[ \\t\\r\\n\\f]");
                            }
                          }
                          
                        }
                        result7 = result7 !== null ? result7 : '';
                        if (result7 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function() { return "O"; })();
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            if (input.charCodeAt(pos) === 92) {
              result0 = "\\";
              pos += 1;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\\\"");
              }
            }
            if (result0 !== null) {
              if (input.charCodeAt(pos) === 48) {
                result1 = "0";
                pos += 1;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"0\"");
                }
              }
              result1 = result1 !== null ? result1 : '';
              if (result1 !== null) {
                if (input.charCodeAt(pos) === 48) {
                  result2 = "0";
                  pos += 1;
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"0\"");
                  }
                }
                result2 = result2 !== null ? result2 : '';
                if (result2 !== null) {
                  if (input.charCodeAt(pos) === 48) {
                    result3 = "0";
                    pos += 1;
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"0\"");
                    }
                  }
                  result3 = result3 !== null ? result3 : '';
                  if (result3 !== null) {
                    if (input.charCodeAt(pos) === 48) {
                      result4 = "0";
                      pos += 1;
                    } else {
                      result4 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"0\"");
                      }
                    }
                    result4 = result4 !== null ? result4 : '';
                    if (result4 !== null) {
                      if (input.charCodeAt(pos) === 54) {
                        result5 = "6";
                        pos += 1;
                      } else {
                        result5 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"6\"");
                        }
                      }
                      if (result5 !== null) {
                        if (/^[fF]/.test(input.charAt(pos))) {
                          result6 = input.charAt(pos);
                          pos++;
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("[fF]");
                          }
                        }
                        if (result6 !== null) {
                          if (input.substr(pos, 2) === "\r\n") {
                            result7 = "\r\n";
                            pos += 2;
                          } else {
                            result7 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"\\r\\n\"");
                            }
                          }
                          if (result7 === null) {
                            if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
                              result7 = input.charAt(pos);
                              pos++;
                            } else {
                              result7 = null;
                              if (reportFailures === 0) {
                                matchFailed("[ \\t\\r\\n\\f]");
                              }
                            }
                            
                          }
                          result7 = result7 !== null ? result7 : '';
                          if (result7 !== null) {
                            result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function() { return "o"; })();
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              if (input.charCodeAt(pos) === 92) {
                result0 = "\\";
                pos += 1;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\\\"");
                }
              }
              if (result0 !== null) {
                if (/^[oO]/.test(input.charAt(pos))) {
                  result1 = input.charAt(pos);
                  pos++;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("[oO]");
                  }
                }
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(char_) { return char_; })(result0[1]);
              }
              if (result0 === null) {
                pos = pos0;
              }
              
            }
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_P() {
        var cacheKey = 'P@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1, pos2;
        
        
        if (/^[pP]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[pP]");
          }
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.charCodeAt(pos) === 92) {
            result0 = "\\";
            pos += 1;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\"");
            }
          }
          if (result0 !== null) {
            if (input.charCodeAt(pos) === 48) {
              result1 = "0";
              pos += 1;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"0\"");
              }
            }
            result1 = result1 !== null ? result1 : '';
            if (result1 !== null) {
              if (input.charCodeAt(pos) === 48) {
                result2 = "0";
                pos += 1;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"0\"");
                }
              }
              result2 = result2 !== null ? result2 : '';
              if (result2 !== null) {
                if (input.charCodeAt(pos) === 48) {
                  result3 = "0";
                  pos += 1;
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"0\"");
                  }
                }
                result3 = result3 !== null ? result3 : '';
                if (result3 !== null) {
                  if (input.charCodeAt(pos) === 48) {
                    result4 = "0";
                    pos += 1;
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"0\"");
                    }
                  }
                  result4 = result4 !== null ? result4 : '';
                  if (result4 !== null) {
                    if (input.substr(pos, 2) === "50") {
                      result5 = "50";
                      pos += 2;
                    } else {
                      result5 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"50\"");
                      }
                    }
                    if (result5 !== null) {
                      if (input.substr(pos, 2) === "\r\n") {
                        result6 = "\r\n";
                        pos += 2;
                      } else {
                        result6 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"\\r\\n\"");
                        }
                      }
                      if (result6 === null) {
                        if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
                          result6 = input.charAt(pos);
                          pos++;
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("[ \\t\\r\\n\\f]");
                          }
                        }
                        
                      }
                      result6 = result6 !== null ? result6 : '';
                      if (result6 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function() { return "P"; })();
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            if (input.charCodeAt(pos) === 92) {
              result0 = "\\";
              pos += 1;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\\\"");
              }
            }
            if (result0 !== null) {
              if (input.charCodeAt(pos) === 48) {
                result1 = "0";
                pos += 1;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"0\"");
                }
              }
              result1 = result1 !== null ? result1 : '';
              if (result1 !== null) {
                if (input.charCodeAt(pos) === 48) {
                  result2 = "0";
                  pos += 1;
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"0\"");
                  }
                }
                result2 = result2 !== null ? result2 : '';
                if (result2 !== null) {
                  if (input.charCodeAt(pos) === 48) {
                    result3 = "0";
                    pos += 1;
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"0\"");
                    }
                  }
                  result3 = result3 !== null ? result3 : '';
                  if (result3 !== null) {
                    if (input.charCodeAt(pos) === 48) {
                      result4 = "0";
                      pos += 1;
                    } else {
                      result4 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"0\"");
                      }
                    }
                    result4 = result4 !== null ? result4 : '';
                    if (result4 !== null) {
                      if (input.substr(pos, 2) === "70") {
                        result5 = "70";
                        pos += 2;
                      } else {
                        result5 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"70\"");
                        }
                      }
                      if (result5 !== null) {
                        if (input.substr(pos, 2) === "\r\n") {
                          result6 = "\r\n";
                          pos += 2;
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"\\r\\n\"");
                          }
                        }
                        if (result6 === null) {
                          if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
                            result6 = input.charAt(pos);
                            pos++;
                          } else {
                            result6 = null;
                            if (reportFailures === 0) {
                              matchFailed("[ \\t\\r\\n\\f]");
                            }
                          }
                          
                        }
                        result6 = result6 !== null ? result6 : '';
                        if (result6 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function() { return "p"; })();
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              if (input.charCodeAt(pos) === 92) {
                result0 = "\\";
                pos += 1;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\\\"");
                }
              }
              if (result0 !== null) {
                if (/^[pP]/.test(input.charAt(pos))) {
                  result1 = input.charAt(pos);
                  pos++;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("[pP]");
                  }
                }
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(char_) { return char_; })(result0[1]);
              }
              if (result0 === null) {
                pos = pos0;
              }
              
            }
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_R() {
        var cacheKey = 'R@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1, pos2;
        
        
        if (/^[rR]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[rR]");
          }
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.charCodeAt(pos) === 92) {
            result0 = "\\";
            pos += 1;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\"");
            }
          }
          if (result0 !== null) {
            if (input.charCodeAt(pos) === 48) {
              result1 = "0";
              pos += 1;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"0\"");
              }
            }
            result1 = result1 !== null ? result1 : '';
            if (result1 !== null) {
              if (input.charCodeAt(pos) === 48) {
                result2 = "0";
                pos += 1;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"0\"");
                }
              }
              result2 = result2 !== null ? result2 : '';
              if (result2 !== null) {
                if (input.charCodeAt(pos) === 48) {
                  result3 = "0";
                  pos += 1;
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"0\"");
                  }
                }
                result3 = result3 !== null ? result3 : '';
                if (result3 !== null) {
                  if (input.charCodeAt(pos) === 48) {
                    result4 = "0";
                    pos += 1;
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"0\"");
                    }
                  }
                  result4 = result4 !== null ? result4 : '';
                  if (result4 !== null) {
                    if (input.substr(pos, 2) === "52") {
                      result5 = "52";
                      pos += 2;
                    } else {
                      result5 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"52\"");
                      }
                    }
                    if (result5 !== null) {
                      if (input.substr(pos, 2) === "\r\n") {
                        result6 = "\r\n";
                        pos += 2;
                      } else {
                        result6 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"\\r\\n\"");
                        }
                      }
                      if (result6 === null) {
                        if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
                          result6 = input.charAt(pos);
                          pos++;
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("[ \\t\\r\\n\\f]");
                          }
                        }
                        
                      }
                      result6 = result6 !== null ? result6 : '';
                      if (result6 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function() { return "R"; })();
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            if (input.charCodeAt(pos) === 92) {
              result0 = "\\";
              pos += 1;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\\\"");
              }
            }
            if (result0 !== null) {
              if (input.charCodeAt(pos) === 48) {
                result1 = "0";
                pos += 1;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"0\"");
                }
              }
              result1 = result1 !== null ? result1 : '';
              if (result1 !== null) {
                if (input.charCodeAt(pos) === 48) {
                  result2 = "0";
                  pos += 1;
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"0\"");
                  }
                }
                result2 = result2 !== null ? result2 : '';
                if (result2 !== null) {
                  if (input.charCodeAt(pos) === 48) {
                    result3 = "0";
                    pos += 1;
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"0\"");
                    }
                  }
                  result3 = result3 !== null ? result3 : '';
                  if (result3 !== null) {
                    if (input.charCodeAt(pos) === 48) {
                      result4 = "0";
                      pos += 1;
                    } else {
                      result4 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"0\"");
                      }
                    }
                    result4 = result4 !== null ? result4 : '';
                    if (result4 !== null) {
                      if (input.substr(pos, 2) === "72") {
                        result5 = "72";
                        pos += 2;
                      } else {
                        result5 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"72\"");
                        }
                      }
                      if (result5 !== null) {
                        if (input.substr(pos, 2) === "\r\n") {
                          result6 = "\r\n";
                          pos += 2;
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"\\r\\n\"");
                          }
                        }
                        if (result6 === null) {
                          if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
                            result6 = input.charAt(pos);
                            pos++;
                          } else {
                            result6 = null;
                            if (reportFailures === 0) {
                              matchFailed("[ \\t\\r\\n\\f]");
                            }
                          }
                          
                        }
                        result6 = result6 !== null ? result6 : '';
                        if (result6 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function() { return "r"; })();
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              if (input.charCodeAt(pos) === 92) {
                result0 = "\\";
                pos += 1;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\\\"");
                }
              }
              if (result0 !== null) {
                if (/^[rR]/.test(input.charAt(pos))) {
                  result1 = input.charAt(pos);
                  pos++;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("[rR]");
                  }
                }
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(char_) { return char_; })(result0[1]);
              }
              if (result0 === null) {
                pos = pos0;
              }
              
            }
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_S_() {
        var cacheKey = 'S_@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1, pos2;
        
        
        if (/^[sS]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[sS]");
          }
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.charCodeAt(pos) === 92) {
            result0 = "\\";
            pos += 1;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\"");
            }
          }
          if (result0 !== null) {
            if (input.charCodeAt(pos) === 48) {
              result1 = "0";
              pos += 1;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"0\"");
              }
            }
            result1 = result1 !== null ? result1 : '';
            if (result1 !== null) {
              if (input.charCodeAt(pos) === 48) {
                result2 = "0";
                pos += 1;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"0\"");
                }
              }
              result2 = result2 !== null ? result2 : '';
              if (result2 !== null) {
                if (input.charCodeAt(pos) === 48) {
                  result3 = "0";
                  pos += 1;
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"0\"");
                  }
                }
                result3 = result3 !== null ? result3 : '';
                if (result3 !== null) {
                  if (input.charCodeAt(pos) === 48) {
                    result4 = "0";
                    pos += 1;
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"0\"");
                    }
                  }
                  result4 = result4 !== null ? result4 : '';
                  if (result4 !== null) {
                    if (input.substr(pos, 2) === "53") {
                      result5 = "53";
                      pos += 2;
                    } else {
                      result5 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"53\"");
                      }
                    }
                    if (result5 !== null) {
                      if (input.substr(pos, 2) === "\r\n") {
                        result6 = "\r\n";
                        pos += 2;
                      } else {
                        result6 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"\\r\\n\"");
                        }
                      }
                      if (result6 === null) {
                        if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
                          result6 = input.charAt(pos);
                          pos++;
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("[ \\t\\r\\n\\f]");
                          }
                        }
                        
                      }
                      result6 = result6 !== null ? result6 : '';
                      if (result6 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function() { return "S"; })();
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            if (input.charCodeAt(pos) === 92) {
              result0 = "\\";
              pos += 1;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\\\"");
              }
            }
            if (result0 !== null) {
              if (input.charCodeAt(pos) === 48) {
                result1 = "0";
                pos += 1;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"0\"");
                }
              }
              result1 = result1 !== null ? result1 : '';
              if (result1 !== null) {
                if (input.charCodeAt(pos) === 48) {
                  result2 = "0";
                  pos += 1;
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"0\"");
                  }
                }
                result2 = result2 !== null ? result2 : '';
                if (result2 !== null) {
                  if (input.charCodeAt(pos) === 48) {
                    result3 = "0";
                    pos += 1;
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"0\"");
                    }
                  }
                  result3 = result3 !== null ? result3 : '';
                  if (result3 !== null) {
                    if (input.charCodeAt(pos) === 48) {
                      result4 = "0";
                      pos += 1;
                    } else {
                      result4 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"0\"");
                      }
                    }
                    result4 = result4 !== null ? result4 : '';
                    if (result4 !== null) {
                      if (input.substr(pos, 2) === "73") {
                        result5 = "73";
                        pos += 2;
                      } else {
                        result5 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"73\"");
                        }
                      }
                      if (result5 !== null) {
                        if (input.substr(pos, 2) === "\r\n") {
                          result6 = "\r\n";
                          pos += 2;
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"\\r\\n\"");
                          }
                        }
                        if (result6 === null) {
                          if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
                            result6 = input.charAt(pos);
                            pos++;
                          } else {
                            result6 = null;
                            if (reportFailures === 0) {
                              matchFailed("[ \\t\\r\\n\\f]");
                            }
                          }
                          
                        }
                        result6 = result6 !== null ? result6 : '';
                        if (result6 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function() { return "s"; })();
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              if (input.charCodeAt(pos) === 92) {
                result0 = "\\";
                pos += 1;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\\\"");
                }
              }
              if (result0 !== null) {
                if (/^[sS]/.test(input.charAt(pos))) {
                  result1 = input.charAt(pos);
                  pos++;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("[sS]");
                  }
                }
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(char_) { return char_; })(result0[1]);
              }
              if (result0 === null) {
                pos = pos0;
              }
              
            }
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_T() {
        var cacheKey = 'T@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1, pos2;
        
        
        if (/^[tT]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[tT]");
          }
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.charCodeAt(pos) === 92) {
            result0 = "\\";
            pos += 1;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\"");
            }
          }
          if (result0 !== null) {
            if (input.charCodeAt(pos) === 48) {
              result1 = "0";
              pos += 1;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"0\"");
              }
            }
            result1 = result1 !== null ? result1 : '';
            if (result1 !== null) {
              if (input.charCodeAt(pos) === 48) {
                result2 = "0";
                pos += 1;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"0\"");
                }
              }
              result2 = result2 !== null ? result2 : '';
              if (result2 !== null) {
                if (input.charCodeAt(pos) === 48) {
                  result3 = "0";
                  pos += 1;
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"0\"");
                  }
                }
                result3 = result3 !== null ? result3 : '';
                if (result3 !== null) {
                  if (input.charCodeAt(pos) === 48) {
                    result4 = "0";
                    pos += 1;
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"0\"");
                    }
                  }
                  result4 = result4 !== null ? result4 : '';
                  if (result4 !== null) {
                    if (input.substr(pos, 2) === "54") {
                      result5 = "54";
                      pos += 2;
                    } else {
                      result5 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"54\"");
                      }
                    }
                    if (result5 !== null) {
                      if (input.substr(pos, 2) === "\r\n") {
                        result6 = "\r\n";
                        pos += 2;
                      } else {
                        result6 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"\\r\\n\"");
                        }
                      }
                      if (result6 === null) {
                        if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
                          result6 = input.charAt(pos);
                          pos++;
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("[ \\t\\r\\n\\f]");
                          }
                        }
                        
                      }
                      result6 = result6 !== null ? result6 : '';
                      if (result6 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function() { return "T"; })();
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            if (input.charCodeAt(pos) === 92) {
              result0 = "\\";
              pos += 1;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\\\"");
              }
            }
            if (result0 !== null) {
              if (input.charCodeAt(pos) === 48) {
                result1 = "0";
                pos += 1;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"0\"");
                }
              }
              result1 = result1 !== null ? result1 : '';
              if (result1 !== null) {
                if (input.charCodeAt(pos) === 48) {
                  result2 = "0";
                  pos += 1;
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"0\"");
                  }
                }
                result2 = result2 !== null ? result2 : '';
                if (result2 !== null) {
                  if (input.charCodeAt(pos) === 48) {
                    result3 = "0";
                    pos += 1;
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"0\"");
                    }
                  }
                  result3 = result3 !== null ? result3 : '';
                  if (result3 !== null) {
                    if (input.charCodeAt(pos) === 48) {
                      result4 = "0";
                      pos += 1;
                    } else {
                      result4 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"0\"");
                      }
                    }
                    result4 = result4 !== null ? result4 : '';
                    if (result4 !== null) {
                      if (input.substr(pos, 2) === "74") {
                        result5 = "74";
                        pos += 2;
                      } else {
                        result5 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"74\"");
                        }
                      }
                      if (result5 !== null) {
                        if (input.substr(pos, 2) === "\r\n") {
                          result6 = "\r\n";
                          pos += 2;
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"\\r\\n\"");
                          }
                        }
                        if (result6 === null) {
                          if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
                            result6 = input.charAt(pos);
                            pos++;
                          } else {
                            result6 = null;
                            if (reportFailures === 0) {
                              matchFailed("[ \\t\\r\\n\\f]");
                            }
                          }
                          
                        }
                        result6 = result6 !== null ? result6 : '';
                        if (result6 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function() { return "t"; })();
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              if (input.charCodeAt(pos) === 92) {
                result0 = "\\";
                pos += 1;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\\\"");
                }
              }
              if (result0 !== null) {
                if (/^[tT]/.test(input.charAt(pos))) {
                  result1 = input.charAt(pos);
                  pos++;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("[tT]");
                  }
                }
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(char_) { return char_; })(result0[1]);
              }
              if (result0 === null) {
                pos = pos0;
              }
              
            }
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_U() {
        var cacheKey = 'U@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1, pos2;
        
        
        if (/^[uU]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[uU]");
          }
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.charCodeAt(pos) === 92) {
            result0 = "\\";
            pos += 1;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\"");
            }
          }
          if (result0 !== null) {
            if (input.charCodeAt(pos) === 48) {
              result1 = "0";
              pos += 1;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"0\"");
              }
            }
            result1 = result1 !== null ? result1 : '';
            if (result1 !== null) {
              if (input.charCodeAt(pos) === 48) {
                result2 = "0";
                pos += 1;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"0\"");
                }
              }
              result2 = result2 !== null ? result2 : '';
              if (result2 !== null) {
                if (input.charCodeAt(pos) === 48) {
                  result3 = "0";
                  pos += 1;
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"0\"");
                  }
                }
                result3 = result3 !== null ? result3 : '';
                if (result3 !== null) {
                  if (input.charCodeAt(pos) === 48) {
                    result4 = "0";
                    pos += 1;
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"0\"");
                    }
                  }
                  result4 = result4 !== null ? result4 : '';
                  if (result4 !== null) {
                    if (input.substr(pos, 2) === "55") {
                      result5 = "55";
                      pos += 2;
                    } else {
                      result5 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"55\"");
                      }
                    }
                    if (result5 !== null) {
                      if (input.substr(pos, 2) === "\r\n") {
                        result6 = "\r\n";
                        pos += 2;
                      } else {
                        result6 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"\\r\\n\"");
                        }
                      }
                      if (result6 === null) {
                        if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
                          result6 = input.charAt(pos);
                          pos++;
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("[ \\t\\r\\n\\f]");
                          }
                        }
                        
                      }
                      result6 = result6 !== null ? result6 : '';
                      if (result6 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function() { return "U"; })();
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            if (input.charCodeAt(pos) === 92) {
              result0 = "\\";
              pos += 1;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\\\"");
              }
            }
            if (result0 !== null) {
              if (input.charCodeAt(pos) === 48) {
                result1 = "0";
                pos += 1;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"0\"");
                }
              }
              result1 = result1 !== null ? result1 : '';
              if (result1 !== null) {
                if (input.charCodeAt(pos) === 48) {
                  result2 = "0";
                  pos += 1;
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"0\"");
                  }
                }
                result2 = result2 !== null ? result2 : '';
                if (result2 !== null) {
                  if (input.charCodeAt(pos) === 48) {
                    result3 = "0";
                    pos += 1;
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"0\"");
                    }
                  }
                  result3 = result3 !== null ? result3 : '';
                  if (result3 !== null) {
                    if (input.charCodeAt(pos) === 48) {
                      result4 = "0";
                      pos += 1;
                    } else {
                      result4 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"0\"");
                      }
                    }
                    result4 = result4 !== null ? result4 : '';
                    if (result4 !== null) {
                      if (input.substr(pos, 2) === "75") {
                        result5 = "75";
                        pos += 2;
                      } else {
                        result5 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"75\"");
                        }
                      }
                      if (result5 !== null) {
                        if (input.substr(pos, 2) === "\r\n") {
                          result6 = "\r\n";
                          pos += 2;
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"\\r\\n\"");
                          }
                        }
                        if (result6 === null) {
                          if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
                            result6 = input.charAt(pos);
                            pos++;
                          } else {
                            result6 = null;
                            if (reportFailures === 0) {
                              matchFailed("[ \\t\\r\\n\\f]");
                            }
                          }
                          
                        }
                        result6 = result6 !== null ? result6 : '';
                        if (result6 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function() { return "u"; })();
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              if (input.charCodeAt(pos) === 92) {
                result0 = "\\";
                pos += 1;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\\\"");
                }
              }
              if (result0 !== null) {
                if (/^[uU]/.test(input.charAt(pos))) {
                  result1 = input.charAt(pos);
                  pos++;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("[uU]");
                  }
                }
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(char_) { return char_; })(result0[1]);
              }
              if (result0 === null) {
                pos = pos0;
              }
              
            }
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_X() {
        var cacheKey = 'X@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1, pos2;
        
        
        if (/^[xX]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[xX]");
          }
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.charCodeAt(pos) === 92) {
            result0 = "\\";
            pos += 1;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\"");
            }
          }
          if (result0 !== null) {
            if (input.charCodeAt(pos) === 48) {
              result1 = "0";
              pos += 1;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"0\"");
              }
            }
            result1 = result1 !== null ? result1 : '';
            if (result1 !== null) {
              if (input.charCodeAt(pos) === 48) {
                result2 = "0";
                pos += 1;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"0\"");
                }
              }
              result2 = result2 !== null ? result2 : '';
              if (result2 !== null) {
                if (input.charCodeAt(pos) === 48) {
                  result3 = "0";
                  pos += 1;
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"0\"");
                  }
                }
                result3 = result3 !== null ? result3 : '';
                if (result3 !== null) {
                  if (input.charCodeAt(pos) === 48) {
                    result4 = "0";
                    pos += 1;
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"0\"");
                    }
                  }
                  result4 = result4 !== null ? result4 : '';
                  if (result4 !== null) {
                    if (input.substr(pos, 2) === "58") {
                      result5 = "58";
                      pos += 2;
                    } else {
                      result5 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"58\"");
                      }
                    }
                    if (result5 !== null) {
                      if (input.substr(pos, 2) === "\r\n") {
                        result6 = "\r\n";
                        pos += 2;
                      } else {
                        result6 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"\\r\\n\"");
                        }
                      }
                      if (result6 === null) {
                        if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
                          result6 = input.charAt(pos);
                          pos++;
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("[ \\t\\r\\n\\f]");
                          }
                        }
                        
                      }
                      result6 = result6 !== null ? result6 : '';
                      if (result6 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function() { return "X"; })();
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            if (input.charCodeAt(pos) === 92) {
              result0 = "\\";
              pos += 1;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\\\"");
              }
            }
            if (result0 !== null) {
              if (input.charCodeAt(pos) === 48) {
                result1 = "0";
                pos += 1;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"0\"");
                }
              }
              result1 = result1 !== null ? result1 : '';
              if (result1 !== null) {
                if (input.charCodeAt(pos) === 48) {
                  result2 = "0";
                  pos += 1;
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"0\"");
                  }
                }
                result2 = result2 !== null ? result2 : '';
                if (result2 !== null) {
                  if (input.charCodeAt(pos) === 48) {
                    result3 = "0";
                    pos += 1;
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"0\"");
                    }
                  }
                  result3 = result3 !== null ? result3 : '';
                  if (result3 !== null) {
                    if (input.charCodeAt(pos) === 48) {
                      result4 = "0";
                      pos += 1;
                    } else {
                      result4 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"0\"");
                      }
                    }
                    result4 = result4 !== null ? result4 : '';
                    if (result4 !== null) {
                      if (input.substr(pos, 2) === "78") {
                        result5 = "78";
                        pos += 2;
                      } else {
                        result5 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"78\"");
                        }
                      }
                      if (result5 !== null) {
                        if (input.substr(pos, 2) === "\r\n") {
                          result6 = "\r\n";
                          pos += 2;
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"\\r\\n\"");
                          }
                        }
                        if (result6 === null) {
                          if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
                            result6 = input.charAt(pos);
                            pos++;
                          } else {
                            result6 = null;
                            if (reportFailures === 0) {
                              matchFailed("[ \\t\\r\\n\\f]");
                            }
                          }
                          
                        }
                        result6 = result6 !== null ? result6 : '';
                        if (result6 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function() { return "x"; })();
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              if (input.charCodeAt(pos) === 92) {
                result0 = "\\";
                pos += 1;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\\\"");
                }
              }
              if (result0 !== null) {
                if (/^[xX]/.test(input.charAt(pos))) {
                  result1 = input.charAt(pos);
                  pos++;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("[xX]");
                  }
                }
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(char_) { return char_; })(result0[1]);
              }
              if (result0 === null) {
                pos = pos0;
              }
              
            }
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Z() {
        var cacheKey = 'Z@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1, pos2;
        
        
        if (/^[zZ]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[zZ]");
          }
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.charCodeAt(pos) === 92) {
            result0 = "\\";
            pos += 1;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\"");
            }
          }
          if (result0 !== null) {
            if (input.charCodeAt(pos) === 48) {
              result1 = "0";
              pos += 1;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"0\"");
              }
            }
            result1 = result1 !== null ? result1 : '';
            if (result1 !== null) {
              if (input.charCodeAt(pos) === 48) {
                result2 = "0";
                pos += 1;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"0\"");
                }
              }
              result2 = result2 !== null ? result2 : '';
              if (result2 !== null) {
                if (input.charCodeAt(pos) === 48) {
                  result3 = "0";
                  pos += 1;
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"0\"");
                  }
                }
                result3 = result3 !== null ? result3 : '';
                if (result3 !== null) {
                  if (input.charCodeAt(pos) === 48) {
                    result4 = "0";
                    pos += 1;
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"0\"");
                    }
                  }
                  result4 = result4 !== null ? result4 : '';
                  if (result4 !== null) {
                    if (input.charCodeAt(pos) === 53) {
                      result5 = "5";
                      pos += 1;
                    } else {
                      result5 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"5\"");
                      }
                    }
                    if (result5 !== null) {
                      if (/^[aA]/.test(input.charAt(pos))) {
                        result6 = input.charAt(pos);
                        pos++;
                      } else {
                        result6 = null;
                        if (reportFailures === 0) {
                          matchFailed("[aA]");
                        }
                      }
                      if (result6 !== null) {
                        if (input.substr(pos, 2) === "\r\n") {
                          result7 = "\r\n";
                          pos += 2;
                        } else {
                          result7 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"\\r\\n\"");
                          }
                        }
                        if (result7 === null) {
                          if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
                            result7 = input.charAt(pos);
                            pos++;
                          } else {
                            result7 = null;
                            if (reportFailures === 0) {
                              matchFailed("[ \\t\\r\\n\\f]");
                            }
                          }
                          
                        }
                        result7 = result7 !== null ? result7 : '';
                        if (result7 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function() { return "Z"; })();
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            if (input.charCodeAt(pos) === 92) {
              result0 = "\\";
              pos += 1;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\\\"");
              }
            }
            if (result0 !== null) {
              if (input.charCodeAt(pos) === 48) {
                result1 = "0";
                pos += 1;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"0\"");
                }
              }
              result1 = result1 !== null ? result1 : '';
              if (result1 !== null) {
                if (input.charCodeAt(pos) === 48) {
                  result2 = "0";
                  pos += 1;
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"0\"");
                  }
                }
                result2 = result2 !== null ? result2 : '';
                if (result2 !== null) {
                  if (input.charCodeAt(pos) === 48) {
                    result3 = "0";
                    pos += 1;
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"0\"");
                    }
                  }
                  result3 = result3 !== null ? result3 : '';
                  if (result3 !== null) {
                    if (input.charCodeAt(pos) === 48) {
                      result4 = "0";
                      pos += 1;
                    } else {
                      result4 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"0\"");
                      }
                    }
                    result4 = result4 !== null ? result4 : '';
                    if (result4 !== null) {
                      if (input.charCodeAt(pos) === 55) {
                        result5 = "7";
                        pos += 1;
                      } else {
                        result5 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"7\"");
                        }
                      }
                      if (result5 !== null) {
                        if (/^[aA]/.test(input.charAt(pos))) {
                          result6 = input.charAt(pos);
                          pos++;
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("[aA]");
                          }
                        }
                        if (result6 !== null) {
                          if (input.substr(pos, 2) === "\r\n") {
                            result7 = "\r\n";
                            pos += 2;
                          } else {
                            result7 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"\\r\\n\"");
                            }
                          }
                          if (result7 === null) {
                            if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
                              result7 = input.charAt(pos);
                              pos++;
                            } else {
                              result7 = null;
                              if (reportFailures === 0) {
                                matchFailed("[ \\t\\r\\n\\f]");
                              }
                            }
                            
                          }
                          result7 = result7 !== null ? result7 : '';
                          if (result7 !== null) {
                            result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function() { return "z"; })();
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              if (input.charCodeAt(pos) === 92) {
                result0 = "\\";
                pos += 1;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\\\"");
                }
              }
              if (result0 !== null) {
                if (/^[zZ]/.test(input.charAt(pos))) {
                  result1 = input.charAt(pos);
                  pos++;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("[zZ]");
                  }
                }
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(char_) { return char_; })(result0[1]);
              }
              if (result0 === null) {
                pos = pos0;
              }
              
            }
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_S() {
        var cacheKey = 'S@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = pos;
        result0 = [];
        result1 = parse_comment();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_comment();
        }
        if (result0 !== null) {
          result1 = parse_s();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("whitespace");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_CDO() {
        var cacheKey = 'CDO@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = pos;
        result0 = [];
        result1 = parse_comment();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_comment();
        }
        if (result0 !== null) {
          if (input.substr(pos, 4) === "<!--") {
            result1 = "<!--";
            pos += 4;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"<!--\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("<!--");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_CDC() {
        var cacheKey = 'CDC@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = pos;
        result0 = [];
        result1 = parse_comment();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_comment();
        }
        if (result0 !== null) {
          if (input.substr(pos, 3) === "-->") {
            result1 = "-->";
            pos += 3;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"-->\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("-->");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_INCLUDES() {
        var cacheKey = 'INCLUDES@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = pos;
        result0 = [];
        result1 = parse_comment();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_comment();
        }
        if (result0 !== null) {
          if (input.substr(pos, 2) === "~=") {
            result1 = "~=";
            pos += 2;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"~=\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("~=");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DASHMATCH() {
        var cacheKey = 'DASHMATCH@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = pos;
        result0 = [];
        result1 = parse_comment();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_comment();
        }
        if (result0 !== null) {
          if (input.substr(pos, 2) === "|=") {
            result1 = "|=";
            pos += 2;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"|=\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("|=");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_STRING() {
        var cacheKey = 'STRING@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        result1 = parse_comment();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_comment();
        }
        if (result0 !== null) {
          result1 = parse_string();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(string) { return string; })(result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("string");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_IDENT() {
        var cacheKey = 'IDENT@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        result1 = parse_comment();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_comment();
        }
        if (result0 !== null) {
          result1 = parse_ident();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(ident) { return {type:'ident', elements: ident}; })(result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("identifier");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_HASH() {
        var cacheKey = 'HASH@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        result1 = parse_comment();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_comment();
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 35) {
            result1 = "#";
            pos += 1;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"#\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_name();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(name) { return "#" + name; })(result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("hash");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_IMPORT_SYM() {
        var cacheKey = 'IMPORT_SYM@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = pos;
        result0 = [];
        result1 = parse_comment();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_comment();
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 64) {
            result1 = "@";
            pos += 1;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"@\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_I();
            if (result2 !== null) {
              result3 = parse_M();
              if (result3 !== null) {
                result4 = parse_P();
                if (result4 !== null) {
                  result5 = parse_O();
                  if (result5 !== null) {
                    result6 = parse_R();
                    if (result6 !== null) {
                      result7 = parse_T();
                      if (result7 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                      } else {
                        result0 = null;
                        pos = pos0;
                      }
                    } else {
                      result0 = null;
                      pos = pos0;
                    }
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("@import");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PAGE_SYM() {
        var cacheKey = 'PAGE_SYM@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = pos;
        result0 = [];
        result1 = parse_comment();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_comment();
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 64) {
            result1 = "@";
            pos += 1;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"@\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_P();
            if (result2 !== null) {
              result3 = parse_A();
              if (result3 !== null) {
                result4 = parse_G();
                if (result4 !== null) {
                  result5 = parse_E();
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("@page");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MEDIA_SYM() {
        var cacheKey = 'MEDIA_SYM@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = pos;
        result0 = [];
        result1 = parse_comment();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_comment();
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 64) {
            result1 = "@";
            pos += 1;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"@\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_M();
            if (result2 !== null) {
              result3 = parse_E();
              if (result3 !== null) {
                result4 = parse_D();
                if (result4 !== null) {
                  result5 = parse_I();
                  if (result5 !== null) {
                    result6 = parse_A();
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos0;
                    }
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("@media");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_CHARSET_SYM() {
        var cacheKey = 'CHARSET_SYM@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = pos;
        result0 = [];
        result1 = parse_comment();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_comment();
        }
        if (result0 !== null) {
          if (input.substr(pos, 9) === "@charset ") {
            result1 = "@charset ";
            pos += 9;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"@charset \"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("@charset");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_IMPORTANT_SYM() {
        var cacheKey = 'IMPORTANT_SYM@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12;
        var pos0, pos1, pos2;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        result1 = parse_comment();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_comment();
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 33) {
            result1 = "!";
            pos += 1;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"!\"");
            }
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_s();
            if (result3 === null) {
              result3 = parse_comment();
              
            }
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_s();
              if (result3 === null) {
                result3 = parse_comment();
                
              }
            }
            if (result2 !== null) {
              result3 = parse_I();
              if (result3 !== null) {
                result4 = parse_M();
                if (result4 !== null) {
                  result5 = parse_P();
                  if (result5 !== null) {
                    result6 = parse_O();
                    if (result6 !== null) {
                      result7 = parse_R();
                      if (result7 !== null) {
                        result8 = parse_T();
                        if (result8 !== null) {
                          result9 = parse_A();
                          if (result9 !== null) {
                            result10 = parse_N();
                            if (result10 !== null) {
                              result11 = parse_T();
                              if (result11 !== null) {
                                result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11];
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function() { return "!important"; })();
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("!important");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_EMS() {
        var cacheKey = 'EMS@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        result1 = parse_comment();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_comment();
        }
        if (result0 !== null) {
          result1 = parse_num();
          if (result1 !== null) {
            result2 = parse_E();
            if (result2 !== null) {
              result3 = parse_M();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(num, e, m) { return num + e + m; })(result0[1], result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("length");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_EXS() {
        var cacheKey = 'EXS@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        result1 = parse_comment();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_comment();
        }
        if (result0 !== null) {
          result1 = parse_num();
          if (result1 !== null) {
            result2 = parse_E();
            if (result2 !== null) {
              result3 = parse_X();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(num, e, x) { return num + e + x; })(result0[1], result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("length");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LENGTH() {
        var cacheKey = 'LENGTH@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2, pos3;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        result1 = parse_comment();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_comment();
        }
        if (result0 !== null) {
          result1 = parse_num();
          if (result1 !== null) {
            pos2 = pos;
            result2 = parse_P();
            if (result2 !== null) {
              result3 = parse_X();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
            if (result2 === null) {
              pos2 = pos;
              result2 = parse_C();
              if (result2 !== null) {
                result3 = parse_M();
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
              if (result2 === null) {
                pos2 = pos;
                result2 = parse_M();
                if (result2 !== null) {
                  result3 = parse_M();
                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = pos2;
                  }
                } else {
                  result2 = null;
                  pos = pos2;
                }
                if (result2 === null) {
                  pos2 = pos;
                  result2 = parse_I();
                  if (result2 !== null) {
                    result3 = parse_N();
                    if (result3 !== null) {
                      result2 = [result2, result3];
                    } else {
                      result2 = null;
                      pos = pos2;
                    }
                  } else {
                    result2 = null;
                    pos = pos2;
                  }
                  if (result2 === null) {
                    pos2 = pos;
                    result2 = parse_P();
                    if (result2 !== null) {
                      result3 = parse_T();
                      if (result3 !== null) {
                        result2 = [result2, result3];
                      } else {
                        result2 = null;
                        pos = pos2;
                      }
                    } else {
                      result2 = null;
                      pos = pos2;
                    }
                    if (result2 === null) {
                      pos2 = pos;
                      result2 = parse_P();
                      if (result2 !== null) {
                        result3 = parse_C();
                        if (result3 !== null) {
                          result2 = [result2, result3];
                        } else {
                          result2 = null;
                          pos = pos2;
                        }
                      } else {
                        result2 = null;
                        pos = pos2;
                      }
                      
                    }
                  }
                }
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(num, unit) {
                return num + unit.join("");
              })(result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("length");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ANGLE() {
        var cacheKey = 'ANGLE@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1, pos2, pos3;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        result1 = parse_comment();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_comment();
        }
        if (result0 !== null) {
          result1 = parse_num();
          if (result1 !== null) {
            pos2 = pos;
            result2 = parse_D();
            if (result2 !== null) {
              result3 = parse_E();
              if (result3 !== null) {
                result4 = parse_G();
                if (result4 !== null) {
                  result2 = [result2, result3, result4];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
            if (result2 === null) {
              pos2 = pos;
              result2 = parse_R();
              if (result2 !== null) {
                result3 = parse_A();
                if (result3 !== null) {
                  result4 = parse_D();
                  if (result4 !== null) {
                    result2 = [result2, result3, result4];
                  } else {
                    result2 = null;
                    pos = pos2;
                  }
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
              if (result2 === null) {
                pos2 = pos;
                result2 = parse_G();
                if (result2 !== null) {
                  result3 = parse_R();
                  if (result3 !== null) {
                    result4 = parse_A();
                    if (result4 !== null) {
                      result5 = parse_D();
                      if (result5 !== null) {
                        result2 = [result2, result3, result4, result5];
                      } else {
                        result2 = null;
                        pos = pos2;
                      }
                    } else {
                      result2 = null;
                      pos = pos2;
                    }
                  } else {
                    result2 = null;
                    pos = pos2;
                  }
                } else {
                  result2 = null;
                  pos = pos2;
                }
                
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(num, unit) {
                return num + unit.join("");
              })(result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("angle");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_TIME() {
        var cacheKey = 'TIME@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2, pos3, pos4;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        result1 = parse_comment();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_comment();
        }
        if (result0 !== null) {
          result1 = parse_num();
          if (result1 !== null) {
            pos2 = pos;
            pos3 = pos;
            result2 = parse_M();
            if (result2 !== null) {
              result3 = parse_S_();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos3;
              }
            } else {
              result2 = null;
              pos = pos3;
            }
            if (result2 !== null) {
              result2 = (function(m, s) { return m + s; })(result2[0], result2[1]);
            }
            if (result2 === null) {
              pos = pos2;
            }
            if (result2 === null) {
              result2 = parse_S_();
              
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(num, unit) {
                return num + unit;
              })(result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("time");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_FREQ() {
        var cacheKey = 'FREQ@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2, pos3;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        result1 = parse_comment();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_comment();
        }
        if (result0 !== null) {
          result1 = parse_num();
          if (result1 !== null) {
            pos2 = pos;
            result2 = parse_H();
            if (result2 !== null) {
              result3 = parse_Z();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
            if (result2 === null) {
              pos2 = pos;
              result2 = parse_K();
              if (result2 !== null) {
                result3 = parse_H();
                if (result3 !== null) {
                  result4 = parse_Z();
                  if (result4 !== null) {
                    result2 = [result2, result3, result4];
                  } else {
                    result2 = null;
                    pos = pos2;
                  }
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
              
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(num, unit) { return num + unit.join(""); })(result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("frequency");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DIMENSION() {
        var cacheKey = 'DIMENSION@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        result1 = parse_comment();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_comment();
        }
        if (result0 !== null) {
          result1 = parse_num();
          if (result1 !== null) {
            result2 = parse_ident();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(num, unit) { return num + unit; })(result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("dimension");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PERCENTAGE() {
        var cacheKey = 'PERCENTAGE@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        result1 = parse_comment();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_comment();
        }
        if (result0 !== null) {
          result1 = parse_num();
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 37) {
              result2 = "%";
              pos += 1;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"%\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(num) { return num + "%"; })(result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("percentage");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NUMBER() {
        var cacheKey = 'NUMBER@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        result1 = parse_comment();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_comment();
        }
        if (result0 !== null) {
          result1 = parse_num();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(num) { return num; })(result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("number");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_URI() {
        var cacheKey = 'URI@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9;
        var pos0, pos1, pos2;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        result1 = parse_comment();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_comment();
        }
        if (result0 !== null) {
          result1 = parse_U();
          if (result1 !== null) {
            result2 = parse_R();
            if (result2 !== null) {
              result3 = parse_L();
              if (result3 !== null) {
                if (input.charCodeAt(pos) === 40) {
                  result4 = "(";
                  pos += 1;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"(\"");
                  }
                }
                if (result4 !== null) {
                  result5 = parse_w();
                  if (result5 !== null) {
                    result6 = parse_string();
                    if (result6 === null) {
                      result6 = parse_url();
                      
                    }
                    if (result6 !== null) {
                      result7 = parse_w();
                      if (result7 !== null) {
                        if (input.charCodeAt(pos) === 41) {
                          result8 = ")";
                          pos += 1;
                        } else {
                          result8 = null;
                          if (reportFailures === 0) {
                            matchFailed("\")\"");
                          }
                        }
                        if (result8 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(elements) {
                  return {
                      type: 'uri',
                      elements: elements
                  }
              })(result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("uri");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_nmcharfunc() {
        var cacheKey = 'nmcharfunc@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        
        if (/^[_a-zA-Z0-9\-.]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[_a-zA-Z0-9\\-.]");
          }
        }
        if (result0 === null) {
          result0 = parse_nonascii();
          if (result0 === null) {
            result0 = parse_escape();
            
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_FUNCIDENT() {
        var cacheKey = 'FUNCIDENT@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 45) {
          result0 = "-";
          pos += 1;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"-\"");
          }
        }
        result0 = result0 !== null ? result0 : '';
        if (result0 !== null) {
          result1 = parse_nmstart();
          if (result1 !== null) {
            result2 = [];
            result3 = parse_nmcharfunc();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_nmcharfunc();
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(dash, nmstart, nmchars) {
                return dash + nmstart + nmchars.join("");
              })(result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_FUNCTION() {
        var cacheKey = 'FUNCTION@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        result1 = parse_comment();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_comment();
        }
        if (result0 !== null) {
          result1 = parse_FUNCIDENT();
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 40) {
              result2 = "(";
              pos += 1;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"(\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(elements) {
                  return {
                      type: 'functionName',
                      elements: elements
                  };
              })(result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("function");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostFailuresExpected);
        var actualPos = Math.max(pos, rightmostFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' || ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
